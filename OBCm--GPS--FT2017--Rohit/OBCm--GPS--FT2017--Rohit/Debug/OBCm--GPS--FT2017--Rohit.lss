
OBCm--GPS--FT2017--Rohit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007f9  00800100  00800100  00000230  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e3a  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000096d  00000000  00000000  0000119a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006b5  00000000  00000000  00001b07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  000021bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000054d  00000000  00000000  000023e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000693  00000000  00000000  00002931  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002fc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	56 c0       	rjmp	.+172    	; 0xf6 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec eb       	ldi	r30, 0xBC	; 188
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	28 e0       	ldi	r18, 0x08	; 8
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 3f       	cpi	r26, 0xF9	; 249
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	5a d0       	rcall	.+180    	; 0x178 <main>
  c4:	79 c0       	rjmp	.+242    	; 0x1b8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <message_ID>:
	}
	sei();
}

void message_ID()
{
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	c1 e1       	ldi	r28, 0x11	; 17
  d2:	d1 e0       	ldi	r29, 0x01	; 1
  d4:	07 e2       	ldi	r16, 0x27	; 39
  d6:	11 e0       	ldi	r17, 0x01	; 1
	for(int x=0;x<22;x++)
	{
		char a=(message[x]);
  d8:	89 91       	ld	r24, Y+
		transmit_string_UART0(a);
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	61 d0       	rcall	.+194    	; 0x1a0 <transmit_string_UART0>
	sei();
}

void message_ID()
{
	for(int x=0;x<22;x++)
  de:	c0 17       	cp	r28, r16
  e0:	d1 07       	cpc	r29, r17
  e2:	d1 f7       	brne	.-12     	; 0xd8 <message_ID+0x10>
	{
		char a=(message[x]);
		transmit_string_UART0(a);
	}
	i=0;
  e4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_end+0x1>
  e8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
		//{
			//message[shift]=message[shift+1];
		//}
		//i=i-1;
	//}
}
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	1f 91       	pop	r17
  f2:	0f 91       	pop	r16
  f4:	08 95       	ret

000000f6 <__vector_18>:
uint8_t GPS_second[4];
uint8_t message[2000];
int i=0;

ISR(USART0_RX_vect)
{
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	0b b6       	in	r0, 0x3b	; 59
 102:	0f 92       	push	r0
 104:	2f 93       	push	r18
 106:	3f 93       	push	r19
 108:	4f 93       	push	r20
 10a:	5f 93       	push	r21
 10c:	6f 93       	push	r22
 10e:	7f 93       	push	r23
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
 114:	af 93       	push	r26
 116:	bf 93       	push	r27
 118:	ef 93       	push	r30
 11a:	ff 93       	push	r31
	message[i]=UDR0;
 11c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 120:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 124:	2c b1       	in	r18, 0x0c	; 12
 126:	fc 01       	movw	r30, r24
 128:	ef 5e       	subi	r30, 0xEF	; 239
 12a:	fe 4f       	sbci	r31, 0xFE	; 254
 12c:	20 83       	st	Z, r18
	i=i+1;
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 134:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
	if(i>=22)
 138:	46 97       	sbiw	r24, 0x16	; 22
 13a:	54 f0       	brlt	.+20     	; 0x150 <__vector_18+0x5a>
	{
		cli();
 13c:	f8 94       	cli
		if(message[0]==0x3F && message[1]==0x3F)
 13e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <message>
 142:	8f 33       	cpi	r24, 0x3F	; 63
 144:	29 f4       	brne	.+10     	; 0x150 <__vector_18+0x5a>
 146:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <message+0x1>
 14a:	8f 33       	cpi	r24, 0x3F	; 63
		{
			message_ID();
 14c:	09 f4       	brne	.+2      	; 0x150 <__vector_18+0x5a>
				//message[shift]=message[shift+1];
			//}
			//i=i-1;
		//}
	}
	sei();
 14e:	bc df       	rcall	.-136    	; 0xc8 <message_ID>
}
 150:	78 94       	sei
 152:	ff 91       	pop	r31
 154:	ef 91       	pop	r30
 156:	bf 91       	pop	r27
 158:	af 91       	pop	r26
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	7f 91       	pop	r23
 160:	6f 91       	pop	r22
 162:	5f 91       	pop	r21
 164:	4f 91       	pop	r20
 166:	3f 91       	pop	r19
 168:	2f 91       	pop	r18
 16a:	0f 90       	pop	r0
 16c:	0b be       	out	0x3b, r0	; 59
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <main>:
#include "led_tests.h"
#include "gps.h"

int main(void)

{
 178:	02 d0       	rcall	.+4      	; 0x17e <init_UART0>
 17a:	78 94       	sei
 17c:	ff cf       	rjmp	.-2      	; 0x17c <main+0x4>

0000017e <init_UART0>:
    	while ( !(UCSR1A & (_BV(UDRE1))) );
    	///* Start transmission
    	UDR1 = buffer[i];
		i++;	
	}
}
 17e:	1b b8       	out	0x0b, r1	; 11
 180:	1a b8       	out	0x0a, r1	; 10
 182:	e5 e9       	ldi	r30, 0x95	; 149
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	10 82       	st	Z, r1
 188:	59 9a       	sbi	0x0b, 1	; 11
 18a:	8a b1       	in	r24, 0x0a	; 10
 18c:	88 69       	ori	r24, 0x98	; 152
 18e:	8a b9       	out	0x0a, r24	; 10
 190:	80 81       	ld	r24, Z
 192:	8e 60       	ori	r24, 0x0E	; 14
 194:	80 83       	st	Z, r24
 196:	87 e6       	ldi	r24, 0x67	; 103
 198:	89 b9       	out	0x09, r24	; 9
 19a:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 19e:	08 95       	ret

000001a0 <transmit_string_UART0>:


void transmit_string_UART0(char *buffer)
{
 1a0:	fc 01       	movw	r30, r24
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 1a2:	90 81       	ld	r25, Z
 1a4:	99 23       	and	r25, r25
 1a6:	39 f0       	breq	.+14     	; 0x1b6 <transmit_string_UART0+0x16>
 1a8:	31 96       	adiw	r30, 0x01	; 1
  	{
    	///* Wait for empty transmit buffer 
    	while ( !(UCSR0A & (_BV(UDRE0))) );
 1aa:	5d 9b       	sbis	0x0b, 5	; 11
 1ac:	fe cf       	rjmp	.-4      	; 0x1aa <transmit_string_UART0+0xa>
    	///* Start transmission
    	UDR0 = buffer[i];
 1ae:	9c b9       	out	0x0c, r25	; 12

void transmit_string_UART0(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
 1b0:	91 91       	ld	r25, Z+
 1b2:	91 11       	cpse	r25, r1
 1b4:	fa cf       	rjmp	.-12     	; 0x1aa <transmit_string_UART0+0xa>
 1b6:	08 95       	ret

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
