
OBCm-Functionality.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800100  00001092  00001126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001092  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cc  00800190  00800190  000011b6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001214  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00001254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ac2  00000000  00000000  000013bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c95  00000000  00000000  00002e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d78  00000000  00000000  00003b13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000328  00000000  00000000  0000488c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006db  00000000  00000000  00004bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a10  00000000  00000000  0000528f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00005c9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
       6:	00 00       	nop
       8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
       a:	00 00       	nop
       c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
       e:	00 00       	nop
      10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
      12:	00 00       	nop
      14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
      16:	00 00       	nop
      18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
      22:	00 00       	nop
      24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
      26:	00 00       	nop
      28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
      32:	00 00       	nop
      34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
      36:	00 00       	nop
      38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
      42:	00 00       	nop
      44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__vector_18>
      4a:	00 00       	nop
      4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
      52:	00 00       	nop
      54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
      56:	00 00       	nop
      58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
      62:	00 00       	nop
      64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
      66:	00 00       	nop
      68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
      72:	00 00       	nop
      74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
      76:	00 00       	nop
      78:	1a c3       	rjmp	.+1588   	; 0x6ae <__vector_30>
      7a:	00 00       	nop
      7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
      82:	00 00       	nop
      84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
      86:	00 00       	nop
      88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 e9       	ldi	r30, 0x92	; 146
      a0:	f0 e1       	ldi	r31, 0x10	; 16
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 39       	cpi	r26, 0x90	; 144
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	a0 e9       	ldi	r26, 0x90	; 144
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ac 35       	cpi	r26, 0x5C	; 92
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	3a d3       	rcall	.+1652   	; 0x738 <main>
      c4:	e4 c7       	rjmp	.+4040   	; 0x108e <_exit>

000000c6 <__bad_interrupt>:
      c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_18>:
{
	flag_gps = 1;
}

ISR(USART0_RX_vect)
{
      c8:	1f 92       	push	r1
      ca:	0f 92       	push	r0
      cc:	0f b6       	in	r0, 0x3f	; 63
      ce:	0f 92       	push	r0
      d0:	11 24       	eor	r1, r1
      d2:	0b b6       	in	r0, 0x3b	; 59
      d4:	0f 92       	push	r0
      d6:	2f 93       	push	r18
      d8:	3f 93       	push	r19
      da:	4f 93       	push	r20
      dc:	5f 93       	push	r21
      de:	6f 93       	push	r22
      e0:	7f 93       	push	r23
      e2:	8f 93       	push	r24
      e4:	9f 93       	push	r25
      e6:	af 93       	push	r26
      e8:	bf 93       	push	r27
      ea:	ef 93       	push	r30
      ec:	ff 93       	push	r31
	uint8_t recv = UDR0;
      ee:	8c b1       	in	r24, 0x0c	; 12
	if(recv =='g') poll_function();
      f0:	87 36       	cpi	r24, 0x67	; 103
      f2:	39 f4       	brne	.+14     	; 0x102 <__vector_18+0x3a>
	pdop=1;
}

void poll_function()
{
	flag_gps = 1;
      f4:	81 e0       	ldi	r24, 0x01	; 1
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <flag_gps+0x1>
      fc:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <flag_gps>
     100:	0a c0       	rjmp	.+20     	; 0x116 <__vector_18+0x4e>

ISR(USART0_RX_vect)
{
	uint8_t recv = UDR0;
	if(recv =='g') poll_function();
	else if(recv == 'm') {
     102:	8d 36       	cpi	r24, 0x6D	; 109
	//	transmit_UART0(0xff);
		mag_poll(); 
     104:	09 f4       	brne	.+2      	; 0x108 <__vector_18+0x40>
	}
	if(flag_gps == 1)
     106:	fe d1       	rcall	.+1020   	; 0x504 <mag_poll>
     108:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <flag_gps>
     10c:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <flag_gps+0x1>
     110:	01 97       	sbiw	r24, 0x01	; 1
     112:	09 f0       	breq	.+2      	; 0x116 <__vector_18+0x4e>
	//cli();
	//message[i]=UDR0;
	//i=i+1;
	//ISR(USART0_RX_vect)

  PORTA ^= 0xf0;
     114:	75 c1       	rjmp	.+746    	; 0x400 <__LOCK_REGION_LENGTH__>
     116:	9b b3       	in	r25, 0x1b	; 27
     118:	80 ef       	ldi	r24, 0xF0	; 240
     11a:	89 27       	eor	r24, r25
  
  ///Buffer the Received Byte
  last_byte = UDR0;
     11c:	8b bb       	out	0x1b, r24	; 27
     11e:	8c b1       	in	r24, 0x0c	; 12
     120:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <last_byte>
  
  
  ///Put the received byte in the last 4-bytes buffer
  buffer = buffer << 8;
     124:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <buffer>
     128:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <buffer+0x1>
     12c:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <buffer+0x2>
     130:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <buffer+0x3>
     134:	ba 2f       	mov	r27, r26
     136:	a9 2f       	mov	r26, r25
     138:	98 2f       	mov	r25, r24
     13a:	88 27       	eor	r24, r24
     13c:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <buffer>
     140:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <buffer+0x1>
     144:	a0 93 94 01 	sts	0x0194, r26	; 0x800194 <buffer+0x2>
     148:	b0 93 95 01 	sts	0x0195, r27	; 0x800195 <buffer+0x3>
  buffer &= 0xFFFFFF00;
     14c:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <buffer>
     150:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <buffer+0x1>
     154:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <buffer+0x2>
     158:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <buffer+0x3>
     15c:	88 27       	eor	r24, r24
     15e:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <buffer>
     162:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <buffer+0x1>
     166:	a0 93 94 01 	sts	0x0194, r26	; 0x800194 <buffer+0x2>
     16a:	b0 93 95 01 	sts	0x0195, r27	; 0x800195 <buffer+0x3>
  buffer |= (uint32_t) last_byte;
     16e:	20 91 91 01 	lds	r18, 0x0191	; 0x800191 <last_byte>
     172:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <buffer>
     176:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <buffer+0x1>
     17a:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <buffer+0x2>
     17e:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <buffer+0x3>
     182:	82 2b       	or	r24, r18
     184:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <buffer>
     188:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <buffer+0x1>
     18c:	a0 93 94 01 	sts	0x0194, r26	; 0x800194 <buffer+0x2>
     190:	b0 93 95 01 	sts	0x0195, r27	; 0x800195 <buffer+0x3>
  
   ///Check the buffer against message ID's
   ///Position
   if(buffer == 0x3F3F04AC)
     194:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <buffer>
     198:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <buffer+0x1>
     19c:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <buffer+0x2>
     1a0:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <buffer+0x3>
     1a4:	8c 3a       	cpi	r24, 0xAC	; 172
     1a6:	94 40       	sbci	r25, 0x04	; 4
     1a8:	af 43       	sbci	r26, 0x3F	; 63
   {
	   uint8_t messagep;
	   messagep = 0x04;
	   transmit_UART0(messagep);
     1aa:	bf 43       	sbci	r27, 0x3F	; 63
     1ac:	39 f4       	brne	.+14     	; 0x1bc <__vector_18+0xf4>
	   message_end = 0;
     1ae:	84 e0       	ldi	r24, 0x04	; 4
     1b0:	12 d3       	rcall	.+1572   	; 0x7d6 <transmit_UART0>
	   pos = 0;
     1b2:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <__data_end>
     1b6:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <pos>
   }
   ///Velocity
   else if(buffer == 0x3F3F05AC)
     1ba:	47 c0       	rjmp	.+142    	; 0x24a <__vector_18+0x182>
     1bc:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <buffer>
     1c0:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <buffer+0x1>
     1c4:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <buffer+0x2>
     1c8:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <buffer+0x3>
     1cc:	8c 3a       	cpi	r24, 0xAC	; 172
     1ce:	95 40       	sbci	r25, 0x05	; 5
   {
	   uint8_t messagev;
	   messagev = 0x05;
	   transmit_UART0(messagev);
     1d0:	af 43       	sbci	r26, 0x3F	; 63
     1d2:	bf 43       	sbci	r27, 0x3F	; 63
     1d4:	29 f4       	brne	.+10     	; 0x1e0 <__vector_18+0x118>
	  // transmit_string_UART0(buffer);
	   vel = 0;
     1d6:	85 e0       	ldi	r24, 0x05	; 5
     1d8:	fe d2       	rcall	.+1532   	; 0x7d6 <transmit_UART0>
     1da:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <vel>
   }
   ///DOP
   else if(buffer == 0x3F3F0BAC)
     1de:	35 c0       	rjmp	.+106    	; 0x24a <__vector_18+0x182>
     1e0:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <buffer>
     1e4:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <buffer+0x1>
     1e8:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <buffer+0x2>
     1ec:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <buffer+0x3>
     1f0:	8c 3a       	cpi	r24, 0xAC	; 172
     1f2:	9b 40       	sbci	r25, 0x0B	; 11
   {
	    uint8_t messaged;
	    messaged = 0x0B;
	    transmit_UART0(messaged);
     1f4:	af 43       	sbci	r26, 0x3F	; 63
     1f6:	bf 43       	sbci	r27, 0x3F	; 63
     1f8:	29 f4       	brne	.+10     	; 0x204 <__vector_18+0x13c>
	   //transmit_string_UART0(buffer);
	   dop = 0;
     1fa:	8b e0       	ldi	r24, 0x0B	; 11
     1fc:	ec d2       	rcall	.+1496   	; 0x7d6 <transmit_UART0>
     1fe:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <dop>
   }
   ///Geodetic System
   else if(buffer == 0x3F3F0EAC)
     202:	23 c0       	rjmp	.+70     	; 0x24a <__vector_18+0x182>
     204:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <buffer>
     208:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <buffer+0x1>
     20c:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <buffer+0x2>
     210:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <buffer+0x3>
     214:	8c 3a       	cpi	r24, 0xAC	; 172
     216:	9e 40       	sbci	r25, 0x0E	; 14
   {
	    uint8_t messageg;
	    messageg = 0x0E;
	    transmit_UART0(messageg);
     218:	af 43       	sbci	r26, 0x3F	; 63
     21a:	bf 43       	sbci	r27, 0x3F	; 63
     21c:	29 f4       	brne	.+10     	; 0x228 <__vector_18+0x160>
	   //transmit_string_UART0(buffer);
	   geo = 0;
     21e:	8e e0       	ldi	r24, 0x0E	; 14
     220:	da d2       	rcall	.+1460   	; 0x7d6 <transmit_UART0>
     222:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <geo>
   }
   ///Time
   else if(buffer == 0x3F3F0FAC)
     226:	11 c0       	rjmp	.+34     	; 0x24a <__vector_18+0x182>
     228:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <buffer>
     22c:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <buffer+0x1>
     230:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <buffer+0x2>
     234:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <buffer+0x3>
     238:	8c 3a       	cpi	r24, 0xAC	; 172
     23a:	9f 40       	sbci	r25, 0x0F	; 15
   {
	    uint8_t messaget;
	    messaget = 0x0F;
	    transmit_UART0(messaget);
     23c:	af 43       	sbci	r26, 0x3F	; 63
     23e:	bf 43       	sbci	r27, 0x3F	; 63
     240:	21 f4       	brne	.+8      	; 0x24a <__vector_18+0x182>
	   //transmit_string_UART0(buffer);
	   time = 0;
     242:	8f e0       	ldi	r24, 0x0F	; 15
     244:	c8 d2       	rcall	.+1424   	; 0x7d6 <transmit_UART0>
   }
  ///Check if the last byte was for position
  if(pos < 13)
     246:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
     24a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pos>
  {
    //uint8_t message;
    //message = 0x04;
    //transmit_UART0(message);
    if(pos>0 && pos<5)
     24e:	8d 30       	cpi	r24, 0x0D	; 13
     250:	38 f5       	brcc	.+78     	; 0x2a0 <__vector_18+0x1d8>
     252:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pos>
     256:	88 23       	and	r24, r24
     258:	41 f0       	breq	.+16     	; 0x26a <__vector_18+0x1a2>
	{
		//x = x >> 8;
		//x &= 0x00FFFFFF;
        //x |= ((uint32_t) last_byte)<<24;
		transmit_UART0(last_byte);
     25a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pos>
     25e:	85 30       	cpi	r24, 0x05	; 5
     260:	20 f4       	brcc	.+8      	; 0x26a <__vector_18+0x1a2>
		//transmit_string_UART0(ptr);
        //sprintf(arrayx,"%x %x",last_byte);transmit_string_UART0(arrayx);
        //
        //transmit_UART0('\r');
	}
	else if (pos<9)
     262:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <last_byte>
     266:	b7 d2       	rcall	.+1390   	; 0x7d6 <transmit_UART0>
     268:	0f c0       	rjmp	.+30     	; 0x288 <__vector_18+0x1c0>
	{
		//y = y >> 8;
		//y &= 0x00FFFFFF;
		//y |= ((uint32_t) last_byte)<<24;
		transmit_UART0(last_byte);
     26a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pos>
     26e:	89 30       	cpi	r24, 0x09	; 9
     270:	20 f4       	brcc	.+8      	; 0x27a <__vector_18+0x1b2>
		//sprintf(arrayy,"%x %x",last_byte);transmit_string_UART0(arrayy);
		//
		//transmit_UART0('\r');
	}
	
	else if(pos<13)
     272:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <last_byte>
     276:	af d2       	rcall	.+1374   	; 0x7d6 <transmit_UART0>
     278:	07 c0       	rjmp	.+14     	; 0x288 <__vector_18+0x1c0>
	{
		//z = z >> 8;
		//z &= 0x00FFFFFF;
		//z |= ((uint32_t) last_byte)<<24;
		transmit_UART0(last_byte);
     27a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pos>
     27e:	8d 30       	cpi	r24, 0x0D	; 13
     280:	18 f4       	brcc	.+6      	; 0x288 <__vector_18+0x1c0>
		//sprintf(arrayz,"%x %x",last_byte);transmit_string_UART0(arrayz);
		//
		//transmit_UART0('\r');
	}
    ///* Increment position and terminate it if full
    pos++;
     282:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <last_byte>
     286:	a7 d2       	rcall	.+1358   	; 0x7d6 <transmit_UART0>
     288:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pos>
    if(pos == 13)
     28c:	8f 5f       	subi	r24, 0xFF	; 255
     28e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pos>
     292:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pos>
	{
      pos = 0xFF;
     296:	8d 30       	cpi	r24, 0x0D	; 13
     298:	19 f4       	brne	.+6      	; 0x2a0 <__vector_18+0x1d8>
	   }
	   
  }
  
  ///Check if the last byte was for velocity
  if(vel < 12)
     29a:	8f ef       	ldi	r24, 0xFF	; 255
     29c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pos>
  {
	//uint8_t message;
	//message = 0x05  ;
	//transmit_UART0(message);
    if(vel < 4)
     2a0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <vel>
     2a4:	8c 30       	cpi	r24, 0x0C	; 12
     2a6:	18 f5       	brcc	.+70     	; 0x2ee <__vector_18+0x226>
	{
		//v_x = v_x >> 8;
		//v_x &= 0x00FFFFFF;
        //v_x |= ((uint32_t) last_byte)<<24;
		transmit_UART0(last_byte);
     2a8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <vel>
     2ac:	84 30       	cpi	r24, 0x04	; 4
     2ae:	20 f4       	brcc	.+8      	; 0x2b8 <__vector_18+0x1f0>
		//sprintf(arrayx,"%x %x",last_byte);transmit_string_UART0(arrayx);
		//
		//transmit_UART0('\r');
		
	}
	else if(vel < 8)
     2b0:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <last_byte>
     2b4:	90 d2       	rcall	.+1312   	; 0x7d6 <transmit_UART0>
	{
		
		//v_y = v_y >> 8;
		//v_y &= 0x00FFFFFF;
        //v_y |= ((uint32_t) last_byte)<<24;
		transmit_UART0(last_byte);
     2b6:	0f c0       	rjmp	.+30     	; 0x2d6 <__vector_18+0x20e>
     2b8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <vel>
     2bc:	88 30       	cpi	r24, 0x08	; 8
		//sprintf(arrayy,"%x %x",last_byte);transmit_string_UART0(arrayy);
		//
		//transmit_UART0('\r');
	}
	else if(vel < 12)
     2be:	20 f4       	brcc	.+8      	; 0x2c8 <__vector_18+0x200>
     2c0:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <last_byte>
     2c4:	88 d2       	rcall	.+1296   	; 0x7d6 <transmit_UART0>
	{
		//v_z = v_z >> 8;
		//v_z &= 0x00FFFFFF;
        //v_z |= ((uint32_t) last_byte)<<24;
		transmit_UART0(last_byte);
     2c6:	07 c0       	rjmp	.+14     	; 0x2d6 <__vector_18+0x20e>
     2c8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <vel>
     2cc:	8c 30       	cpi	r24, 0x0C	; 12
		//sprintf(arrayz,"%x %x",last_byte);transmit_string_UART0(arrayz);
		//
		//transmit_UART0('\r');
	}
	//*((uint8_t *)&gps.v_x + vel) = last_byte;
	vel++;
     2ce:	18 f4       	brcc	.+6      	; 0x2d6 <__vector_18+0x20e>
     2d0:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <last_byte>
     2d4:	80 d2       	rcall	.+1280   	; 0x7d6 <transmit_UART0>
     2d6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <vel>
    if(vel == 12)
     2da:	8f 5f       	subi	r24, 0xFF	; 255
     2dc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <vel>
     {
		  vel = 0xFF;
     2e0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <vel>

	 }
  }
  
  ///Check if the last byte was for PDOP
  if(dop < 4)
     2e4:	8c 30       	cpi	r24, 0x0C	; 12
     2e6:	19 f4       	brne	.+6      	; 0x2ee <__vector_18+0x226>
     2e8:	8f ef       	ldi	r24, 0xFF	; 255
     2ea:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <vel>
  {
    if(dop >= 2)
     2ee:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <dop>
     2f2:	84 30       	cpi	r24, 0x04	; 4
    {
		 //pdop =  pdop >> 8;
		 //pdop &= 0x00FF;
         //pdop |= ((uint16_t) last_byte)<<8;
		 transmit_UART0(last_byte);
     2f4:	98 f4       	brcc	.+38     	; 0x31c <__vector_18+0x254>
     2f6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <dop>
     2fa:	82 30       	cpi	r24, 0x02	; 2
     }
//	*((uint8_t *)&pdop + (dop - 2)) = last_byte;
	dop++;
     2fc:	18 f0       	brcs	.+6      	; 0x304 <__vector_18+0x23c>
     2fe:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <last_byte>
     302:	69 d2       	rcall	.+1234   	; 0x7d6 <transmit_UART0>
     304:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <dop>
    if(dop == 4)
     308:	8f 5f       	subi	r24, 0xFF	; 255
     30a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dop>
      dop = 0xFF;
     30e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <dop>
     312:	84 30       	cpi	r24, 0x04	; 4
  }
  
  ///Check if the last byte was for Geodetic position
  if(geo < 16)
     314:	19 f4       	brne	.+6      	; 0x31c <__vector_18+0x254>
     316:	8f ef       	ldi	r24, 0xFF	; 255
     318:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dop>
  {
	if(geo < 4);  
     31c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <geo>
     320:	80 31       	cpi	r24, 0x10	; 16
    else if(geo < 8)
     322:	38 f5       	brcc	.+78     	; 0x372 <__vector_18+0x2aa>
     324:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <geo>
	{
		//lat = lat >> 8;
		//lat &= 0x00FFFFFF;
		//lat |= ((uint32_t) last_byte)<<24;
		transmit_UART0(last_byte);
     328:	84 30       	cpi	r24, 0x04	; 4
     32a:	b8 f0       	brcs	.+46     	; 0x35a <__vector_18+0x292>
     32c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <geo>
	}
	else if(geo < 12)
     330:	88 30       	cpi	r24, 0x08	; 8
     332:	20 f4       	brcc	.+8      	; 0x33c <__vector_18+0x274>
     334:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <last_byte>
	{
		//lon = lon >> 8;
		//lon &= 0x00FFFFFF;
		//lon |= ((uint32_t) last_byte)<<24;
		transmit_UART0(last_byte);
     338:	4e d2       	rcall	.+1180   	; 0x7d6 <transmit_UART0>
     33a:	0f c0       	rjmp	.+30     	; 0x35a <__vector_18+0x292>
     33c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <geo>
	}
	else if(geo < 16 )
     340:	8c 30       	cpi	r24, 0x0C	; 12
     342:	20 f4       	brcc	.+8      	; 0x34c <__vector_18+0x284>
     344:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <last_byte>
	{
		//alt = alt >> 8;
		//alt &= 0x00FFFFFF;
		//alt |= ((uint32_t) last_byte)<<24;
		transmit_UART0(last_byte);
     348:	46 d2       	rcall	.+1164   	; 0x7d6 <transmit_UART0>
     34a:	07 c0       	rjmp	.+14     	; 0x35a <__vector_18+0x292>
     34c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <geo>
	}
	
//    *((uint8_t *)&gps.lat + (geo - 4)) = last_byte;
    
    geo++;
     350:	80 31       	cpi	r24, 0x10	; 16
     352:	18 f4       	brcc	.+6      	; 0x35a <__vector_18+0x292>
     354:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <last_byte>
     358:	3e d2       	rcall	.+1148   	; 0x7d6 <transmit_UART0>
    if(geo == 16)
     35a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <geo>
     35e:	8f 5f       	subi	r24, 0xFF	; 255
	{
      geo = 0xFF;
     360:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <geo>
     364:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <geo>

	}
  }
  
  ///Check if the last byte was for Time
  if(time < 7)
     368:	80 31       	cpi	r24, 0x10	; 16
     36a:	19 f4       	brne	.+6      	; 0x372 <__vector_18+0x2aa>
     36c:	8f ef       	ldi	r24, 0xFF	; 255
  {
	  
	  if(time == 0)
     36e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <geo>
     372:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
	  {
		  //hours = last_byte;
		  transmit_UART0(last_byte);
     376:	87 30       	cpi	r24, 0x07	; 7
     378:	08 f0       	brcs	.+2      	; 0x37c <__vector_18+0x2b4>
     37a:	42 c0       	rjmp	.+132    	; 0x400 <__LOCK_REGION_LENGTH__>
     37c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
	  }
	  else if(time == 1)
     380:	81 11       	cpse	r24, r1
     382:	04 c0       	rjmp	.+8      	; 0x38c <__vector_18+0x2c4>
     384:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <last_byte>
	  {
		  //minutes = last_byte;
		  transmit_UART0(last_byte);
     388:	26 d2       	rcall	.+1100   	; 0x7d6 <transmit_UART0>
     38a:	27 c0       	rjmp	.+78     	; 0x3da <__vector_18+0x312>
     38c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
	  }
	  else if(time == 2)
     390:	81 30       	cpi	r24, 0x01	; 1
     392:	21 f4       	brne	.+8      	; 0x39c <__vector_18+0x2d4>
	  {
		  //seconds = last_byte;
		  transmit_UART0(last_byte);
     394:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <last_byte>
     398:	1e d2       	rcall	.+1084   	; 0x7d6 <transmit_UART0>
     39a:	1f c0       	rjmp	.+62     	; 0x3da <__vector_18+0x312>
	  }
	  else if(time == 3)
     39c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     3a0:	82 30       	cpi	r24, 0x02	; 2
	  {
		  //date = last_byte;
		  transmit_UART0(last_byte);
     3a2:	21 f4       	brne	.+8      	; 0x3ac <__vector_18+0x2e4>
     3a4:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <last_byte>
     3a8:	16 d2       	rcall	.+1068   	; 0x7d6 <transmit_UART0>
     3aa:	17 c0       	rjmp	.+46     	; 0x3da <__vector_18+0x312>
	  }else if(time == 4)
     3ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     3b0:	83 30       	cpi	r24, 0x03	; 3
     3b2:	21 f4       	brne	.+8      	; 0x3bc <__vector_18+0x2f4>
	  {
		  //month = last_byte;
		  transmit_UART0(last_byte);
     3b4:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <last_byte>
     3b8:	0e d2       	rcall	.+1052   	; 0x7d6 <transmit_UART0>
     3ba:	0f c0       	rjmp	.+30     	; 0x3da <__vector_18+0x312>
     3bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
	  }else if(time > 4)
     3c0:	84 30       	cpi	r24, 0x04	; 4
     3c2:	21 f4       	brne	.+8      	; 0x3cc <__vector_18+0x304>
     3c4:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <last_byte>
	  {
		  //year = year >> 8;
		  //year &= 0x00FF;
		  //year |= ((uint16_t) last_byte)<<8;
		  transmit_UART0(last_byte);
     3c8:	06 d2       	rcall	.+1036   	; 0x7d6 <transmit_UART0>
     3ca:	07 c0       	rjmp	.+14     	; 0x3da <__vector_18+0x312>
     3cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>

	  }
    //*((uint8_t *)&gps.hours + time) = last_byte;
    
    time++;
     3d0:	85 30       	cpi	r24, 0x05	; 5
     3d2:	18 f0       	brcs	.+6      	; 0x3da <__vector_18+0x312>
     3d4:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <last_byte>
    if(time == 7)
     3d8:	fe d1       	rcall	.+1020   	; 0x7d6 <transmit_UART0>
     3da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     3de:	8f 5f       	subi	r24, 0xFF	; 255
    {
      time = 0xFF;
     3e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     3e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
      ///* * The Entire message has been read
      message_end = 1;
     3e8:	87 30       	cpi	r24, 0x07	; 7
     3ea:	51 f4       	brne	.+20     	; 0x400 <__LOCK_REGION_LENGTH__>
	 //  UCSR0B &= ~(_BV(RXCIE0)); //remember this change iterrupt off
	 flag_gps = 0;
     3ec:	8f ef       	ldi	r24, 0xFF	; 255
     3ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     3f2:	81 e0       	ldi	r24, 0x01	; 1
		//}
	//}
	//sei();
	  
	  }
}
     3f4:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <__data_end>
     3f8:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <flag_gps+0x1>
     3fc:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <flag_gps>
     400:	ff 91       	pop	r31
     402:	ef 91       	pop	r30
     404:	bf 91       	pop	r27
     406:	af 91       	pop	r26
     408:	9f 91       	pop	r25
     40a:	8f 91       	pop	r24
     40c:	7f 91       	pop	r23
     40e:	6f 91       	pop	r22
     410:	5f 91       	pop	r21
     412:	4f 91       	pop	r20
     414:	3f 91       	pop	r19
     416:	2f 91       	pop	r18
     418:	0f 90       	pop	r0
     41a:	0b be       	out	0x3b, r0	; 59
     41c:	0f 90       	pop	r0
     41e:	0f be       	out	0x3f, r0	; 63
     420:	0f 90       	pop	r0
     422:	1f 90       	pop	r1
     424:	18 95       	reti

00000426 <led_test_m_config>:
#include "led_tests.h"
#include "uart.h"
#include <avr/io.h>

void led_test_m_config(void)
{
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
	DDRA=0xFF;
     42a:	8f ef       	ldi	r24, 0xFF	; 255
     42c:	8a bb       	out	0x1a, r24	; 26
	
	transmit_string_UART0("_a_");
     42e:	87 e0       	ldi	r24, 0x07	; 7
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	eb d1       	rcall	.+982    	; 0x80a <transmit_string_UART0>
		
	PORTA = 0x0F;
     434:	df e0       	ldi	r29, 0x0F	; 15
     436:	db bb       	out	0x1b, r29	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     438:	2f ef       	ldi	r18, 0xFF	; 255
     43a:	81 ee       	ldi	r24, 0xE1	; 225
     43c:	94 e0       	ldi	r25, 0x04	; 4
     43e:	21 50       	subi	r18, 0x01	; 1
     440:	80 40       	sbci	r24, 0x00	; 0
     442:	90 40       	sbci	r25, 0x00	; 0
     444:	e1 f7       	brne	.-8      	; 0x43e <led_test_m_config+0x18>
     446:	00 c0       	rjmp	.+0      	; 0x448 <led_test_m_config+0x22>
     448:	00 00       	nop
	_delay_ms(200);
	PORTA = 0xF0;
     44a:	c0 ef       	ldi	r28, 0xF0	; 240
     44c:	cb bb       	out	0x1b, r28	; 27
     44e:	2f ef       	ldi	r18, 0xFF	; 255
     450:	81 ee       	ldi	r24, 0xE1	; 225
     452:	94 e0       	ldi	r25, 0x04	; 4
     454:	21 50       	subi	r18, 0x01	; 1
     456:	80 40       	sbci	r24, 0x00	; 0
     458:	90 40       	sbci	r25, 0x00	; 0
     45a:	e1 f7       	brne	.-8      	; 0x454 <led_test_m_config+0x2e>
     45c:	00 c0       	rjmp	.+0      	; 0x45e <led_test_m_config+0x38>
     45e:	00 00       	nop
	_delay_ms(200);

	transmit_string_UART0("_b_");
     460:	8b e0       	ldi	r24, 0x0B	; 11
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	d2 d1       	rcall	.+932    	; 0x80a <transmit_string_UART0>
		
	PORTA = 0x0F;
     466:	db bb       	out	0x1b, r29	; 27
     468:	2f ef       	ldi	r18, 0xFF	; 255
     46a:	81 ee       	ldi	r24, 0xE1	; 225
     46c:	94 e0       	ldi	r25, 0x04	; 4
     46e:	21 50       	subi	r18, 0x01	; 1
     470:	80 40       	sbci	r24, 0x00	; 0
     472:	90 40       	sbci	r25, 0x00	; 0
     474:	e1 f7       	brne	.-8      	; 0x46e <led_test_m_config+0x48>
     476:	00 c0       	rjmp	.+0      	; 0x478 <led_test_m_config+0x52>
     478:	00 00       	nop
	_delay_ms(200);
	PORTA = 0xF0;
     47a:	cb bb       	out	0x1b, r28	; 27
     47c:	2f ef       	ldi	r18, 0xFF	; 255
     47e:	81 ee       	ldi	r24, 0xE1	; 225
     480:	94 e0       	ldi	r25, 0x04	; 4
     482:	21 50       	subi	r18, 0x01	; 1
     484:	80 40       	sbci	r24, 0x00	; 0
     486:	90 40       	sbci	r25, 0x00	; 0
     488:	e1 f7       	brne	.-8      	; 0x482 <led_test_m_config+0x5c>
     48a:	00 c0       	rjmp	.+0      	; 0x48c <led_test_m_config+0x66>
	_delay_ms(200);
	
	transmit_string_UART0("_c_");
     48c:	00 00       	nop
     48e:	8f e0       	ldi	r24, 0x0F	; 15
     490:	91 e0       	ldi	r25, 0x01	; 1
	
	PORTA = 0x0F;
     492:	bb d1       	rcall	.+886    	; 0x80a <transmit_string_UART0>
     494:	db bb       	out	0x1b, r29	; 27
     496:	2f ef       	ldi	r18, 0xFF	; 255
     498:	81 ee       	ldi	r24, 0xE1	; 225
     49a:	94 e0       	ldi	r25, 0x04	; 4
     49c:	21 50       	subi	r18, 0x01	; 1
     49e:	80 40       	sbci	r24, 0x00	; 0
     4a0:	90 40       	sbci	r25, 0x00	; 0
     4a2:	e1 f7       	brne	.-8      	; 0x49c <led_test_m_config+0x76>
     4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <led_test_m_config+0x80>
	_delay_ms(200);
	PORTA = 0xF0;
     4a6:	00 00       	nop
     4a8:	cb bb       	out	0x1b, r28	; 27
     4aa:	2f ef       	ldi	r18, 0xFF	; 255
     4ac:	81 ee       	ldi	r24, 0xE1	; 225
     4ae:	94 e0       	ldi	r25, 0x04	; 4
     4b0:	21 50       	subi	r18, 0x01	; 1
     4b2:	80 40       	sbci	r24, 0x00	; 0
     4b4:	90 40       	sbci	r25, 0x00	; 0
     4b6:	e1 f7       	brne	.-8      	; 0x4b0 <led_test_m_config+0x8a>
	_delay_ms(200);
	
	transmit_string_UART0("_d_");
     4b8:	00 c0       	rjmp	.+0      	; 0x4ba <led_test_m_config+0x94>
     4ba:	00 00       	nop
     4bc:	83 e1       	ldi	r24, 0x13	; 19
     4be:	91 e0       	ldi	r25, 0x01	; 1
	
	PORTA = 0x0F;
     4c0:	a4 d1       	rcall	.+840    	; 0x80a <transmit_string_UART0>
     4c2:	db bb       	out	0x1b, r29	; 27
     4c4:	2f ef       	ldi	r18, 0xFF	; 255
     4c6:	81 ee       	ldi	r24, 0xE1	; 225
     4c8:	94 e0       	ldi	r25, 0x04	; 4
     4ca:	21 50       	subi	r18, 0x01	; 1
     4cc:	80 40       	sbci	r24, 0x00	; 0
     4ce:	90 40       	sbci	r25, 0x00	; 0
     4d0:	e1 f7       	brne	.-8      	; 0x4ca <led_test_m_config+0xa4>
     4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <led_test_m_config+0xae>
	_delay_ms(200);
	PORTA = 0xF0;
     4d4:	00 00       	nop
     4d6:	cb bb       	out	0x1b, r28	; 27
     4d8:	2f ef       	ldi	r18, 0xFF	; 255
     4da:	81 ee       	ldi	r24, 0xE1	; 225
     4dc:	94 e0       	ldi	r25, 0x04	; 4
     4de:	21 50       	subi	r18, 0x01	; 1
     4e0:	80 40       	sbci	r24, 0x00	; 0
     4e2:	90 40       	sbci	r25, 0x00	; 0
     4e4:	e1 f7       	brne	.-8      	; 0x4de <led_test_m_config+0xb8>
     4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <led_test_m_config+0xc2>
	_delay_ms(200);
	
	PORTA = 0x00; 
     4e8:	00 00       	nop
     4ea:	1b ba       	out	0x1b, r1	; 27
     4ec:	2f ef       	ldi	r18, 0xFF	; 255
     4ee:	81 ee       	ldi	r24, 0xE1	; 225
     4f0:	94 e0       	ldi	r25, 0x04	; 4
     4f2:	21 50       	subi	r18, 0x01	; 1
     4f4:	80 40       	sbci	r24, 0x00	; 0
     4f6:	90 40       	sbci	r25, 0x00	; 0
     4f8:	e1 f7       	brne	.-8      	; 0x4f2 <led_test_m_config+0xcc>
     4fa:	00 c0       	rjmp	.+0      	; 0x4fc <led_test_m_config+0xd6>
	_delay_ms(200);
	
}
     4fc:	00 00       	nop
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	08 95       	ret

00000504 <mag_poll>:
	//transmit_string_UART0("9600OK");
};

void mag_zero_toggle(){
	//transmit_string_UART1("*00WE\r");
	transmit_string_UART1("*00ZR\r");
     504:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <n+0x1>
     508:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <n>
     50c:	89 e4       	ldi	r24, 0x49	; 73
     50e:	91 e0       	ldi	r25, 0x01	; 1
     510:	66 c1       	rjmp	.+716    	; 0x7de <transmit_string_UART1>
     512:	08 95       	ret

00000514 <mag_value>:
	//transmit_string_UART0("9600OK");
};


void mag_value(){
     514:	cf 92       	push	r12
     516:	df 92       	push	r13
     518:	ef 92       	push	r14
     51a:	ff 92       	push	r15
     51c:	0f 93       	push	r16
     51e:	1f 93       	push	r17
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	cd b7       	in	r28, 0x3d	; 61
     526:	de b7       	in	r29, 0x3e	; 62
     528:	6e 97       	sbiw	r28, 0x1e	; 30
     52a:	0f b6       	in	r0, 0x3f	; 63
     52c:	f8 94       	cli
     52e:	de bf       	out	0x3e, r29	; 62
     530:	0f be       	out	0x3f, r0	; 63
     532:	cd bf       	out	0x3d, r28	; 61
	
	int Bxh = B[0];
	int Bxl = B[1];
	int Byh = B[2];
     534:	ee e4       	ldi	r30, 0x4E	; 78
     536:	f2 e0       	ldi	r31, 0x02	; 2
     538:	22 81       	ldd	r18, Z+2	; 0x02
     53a:	30 e0       	ldi	r19, 0x00	; 0
	int Byl = B[3];
     53c:	73 81       	ldd	r23, Z+3	; 0x03
	int Bzh = B[4];
     53e:	44 81       	ldd	r20, Z+4	; 0x04
     540:	50 e0       	ldi	r21, 0x00	; 0
	int Bzl = B[5];
     542:	65 81       	ldd	r22, Z+5	; 0x05
	
	Bx = Bxh*16*16 + Bxl;
     544:	80 81       	ld	r24, Z
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	98 2f       	mov	r25, r24
     54a:	88 27       	eor	r24, r24
     54c:	e1 81       	ldd	r30, Z+1	; 0x01
     54e:	8e 0f       	add	r24, r30
     550:	91 1d       	adc	r25, r1
     552:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <Bx+0x1>
     556:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <Bx>
	By = Byh*16*16 + Byl;
     55a:	32 2f       	mov	r19, r18
     55c:	22 27       	eor	r18, r18
     55e:	27 0f       	add	r18, r23
     560:	31 1d       	adc	r19, r1
     562:	30 93 4d 02 	sts	0x024D, r19	; 0x80024d <By+0x1>
     566:	20 93 4c 02 	sts	0x024C, r18	; 0x80024c <By>
	Bz = Bzh*16*16 + Bzl;
     56a:	34 2f       	mov	r19, r20
     56c:	22 27       	eor	r18, r18
     56e:	26 0f       	add	r18, r22
     570:	31 1d       	adc	r19, r1
     572:	30 93 55 02 	sts	0x0255, r19	; 0x800255 <Bz+0x1>
     576:	20 93 54 02 	sts	0x0254, r18	; 0x800254 <Bz>
	
	char bx[10];
	sprintf(bx, "%d", Bx);
     57a:	9f 93       	push	r25
     57c:	8f 93       	push	r24
     57e:	02 e8       	ldi	r16, 0x82	; 130
     580:	11 e0       	ldi	r17, 0x01	; 1
     582:	1f 93       	push	r17
     584:	0f 93       	push	r16
     586:	ce 01       	movw	r24, r28
     588:	01 96       	adiw	r24, 0x01	; 1
     58a:	6c 01       	movw	r12, r24
     58c:	9f 93       	push	r25
     58e:	8f 93       	push	r24
     590:	a3 d2       	rcall	.+1350   	; 0xad8 <sprintf>
	char by[10];
	sprintf(by, "%d", By);
     592:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <By+0x1>
     596:	8f 93       	push	r24
     598:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <By>
     59c:	8f 93       	push	r24
     59e:	1f 93       	push	r17
     5a0:	0f 93       	push	r16
     5a2:	7e 01       	movw	r14, r28
     5a4:	9b e0       	ldi	r25, 0x0B	; 11
     5a6:	e9 0e       	add	r14, r25
     5a8:	f1 1c       	adc	r15, r1
     5aa:	ff 92       	push	r15
     5ac:	ef 92       	push	r14
     5ae:	94 d2       	rcall	.+1320   	; 0xad8 <sprintf>
	char bz[10];
	sprintf(bz, "%d", Bz);
     5b0:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <Bz+0x1>
     5b4:	8f 93       	push	r24
     5b6:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <Bz>
     5ba:	8f 93       	push	r24
     5bc:	1f 93       	push	r17
     5be:	0f 93       	push	r16
     5c0:	8e 01       	movw	r16, r28
     5c2:	0b 5e       	subi	r16, 0xEB	; 235
     5c4:	1f 4f       	sbci	r17, 0xFF	; 255
     5c6:	1f 93       	push	r17
     5c8:	0f 93       	push	r16
	transmit_string_UART0("( ");
     5ca:	86 d2       	rcall	.+1292   	; 0xad8 <sprintf>
     5cc:	85 e8       	ldi	r24, 0x85	; 133
	transmit_string_UART0(bx);
     5ce:	91 e0       	ldi	r25, 0x01	; 1
	transmit_string_UART0(" , ");
     5d0:	1c d1       	rcall	.+568    	; 0x80a <transmit_string_UART0>
     5d2:	c6 01       	movw	r24, r12
	transmit_string_UART0(by);
     5d4:	1a d1       	rcall	.+564    	; 0x80a <transmit_string_UART0>
	transmit_string_UART0(" , ");
     5d6:	88 e8       	ldi	r24, 0x88	; 136
     5d8:	91 e0       	ldi	r25, 0x01	; 1
     5da:	17 d1       	rcall	.+558    	; 0x80a <transmit_string_UART0>
	transmit_string_UART0(bz);
     5dc:	c7 01       	movw	r24, r14
     5de:	15 d1       	rcall	.+554    	; 0x80a <transmit_string_UART0>
     5e0:	88 e8       	ldi	r24, 0x88	; 136
	transmit_string_UART0(" ) ");
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	12 d1       	rcall	.+548    	; 0x80a <transmit_string_UART0>
     5e6:	c8 01       	movw	r24, r16
	
	BX = (Bx/30000.0)*2.0;
     5e8:	10 d1       	rcall	.+544    	; 0x80a <transmit_string_UART0>
     5ea:	8c e8       	ldi	r24, 0x8C	; 140
     5ec:	91 e0       	ldi	r25, 0x01	; 1
     5ee:	0d d1       	rcall	.+538    	; 0x80a <transmit_string_UART0>
     5f0:	60 91 5a 02 	lds	r22, 0x025A	; 0x80025a <Bx>
     5f4:	70 91 5b 02 	lds	r23, 0x025B	; 0x80025b <Bx+0x1>
     5f8:	07 2e       	mov	r0, r23
     5fa:	00 0c       	add	r0, r0
     5fc:	88 0b       	sbc	r24, r24
     5fe:	99 0b       	sbc	r25, r25
     600:	df d1       	rcall	.+958    	; 0x9c0 <__floatsisf>
     602:	20 e0       	ldi	r18, 0x00	; 0
     604:	30 e6       	ldi	r19, 0x60	; 96
     606:	4a ee       	ldi	r20, 0xEA	; 234
     608:	56 e4       	ldi	r21, 0x46	; 70
     60a:	70 d1       	rcall	.+736    	; 0x8ec <__divsf3>
     60c:	9b 01       	movw	r18, r22
     60e:	ac 01       	movw	r20, r24
     610:	09 d1       	rcall	.+530    	; 0x824 <__addsf3>
     612:	60 93 56 02 	sts	0x0256, r22	; 0x800256 <BX>
     616:	70 93 57 02 	sts	0x0257, r23	; 0x800257 <BX+0x1>
	BY = (By/30000.0)*2.0;
     61a:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <BX+0x2>
     61e:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <BX+0x3>
     622:	60 91 4c 02 	lds	r22, 0x024C	; 0x80024c <By>
     626:	70 91 4d 02 	lds	r23, 0x024D	; 0x80024d <By+0x1>
     62a:	07 2e       	mov	r0, r23
     62c:	00 0c       	add	r0, r0
     62e:	88 0b       	sbc	r24, r24
     630:	99 0b       	sbc	r25, r25
     632:	c6 d1       	rcall	.+908    	; 0x9c0 <__floatsisf>
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	30 e6       	ldi	r19, 0x60	; 96
     638:	4a ee       	ldi	r20, 0xEA	; 234
     63a:	56 e4       	ldi	r21, 0x46	; 70
     63c:	57 d1       	rcall	.+686    	; 0x8ec <__divsf3>
     63e:	9b 01       	movw	r18, r22
     640:	ac 01       	movw	r20, r24
     642:	f0 d0       	rcall	.+480    	; 0x824 <__addsf3>
     644:	60 93 48 02 	sts	0x0248, r22	; 0x800248 <BY>
	BZ = (Bz/30000.0)*2.0;
     648:	70 93 49 02 	sts	0x0249, r23	; 0x800249 <BY+0x1>
     64c:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <BY+0x2>
     650:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <BY+0x3>
     654:	60 91 54 02 	lds	r22, 0x0254	; 0x800254 <Bz>
     658:	70 91 55 02 	lds	r23, 0x0255	; 0x800255 <Bz+0x1>
     65c:	07 2e       	mov	r0, r23
     65e:	00 0c       	add	r0, r0
     660:	88 0b       	sbc	r24, r24
     662:	99 0b       	sbc	r25, r25
     664:	ad d1       	rcall	.+858    	; 0x9c0 <__floatsisf>
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	30 e6       	ldi	r19, 0x60	; 96
     66a:	4a ee       	ldi	r20, 0xEA	; 234
     66c:	56 e4       	ldi	r21, 0x46	; 70
     66e:	3e d1       	rcall	.+636    	; 0x8ec <__divsf3>
     670:	9b 01       	movw	r18, r22
     672:	ac 01       	movw	r20, r24
     674:	d7 d0       	rcall	.+430    	; 0x824 <__addsf3>
     676:	60 93 44 02 	sts	0x0244, r22	; 0x800244 <BZ>
     67a:	70 93 45 02 	sts	0x0245, r23	; 0x800245 <BZ+0x1>
	
	
}
     67e:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <BZ+0x2>
     682:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <BZ+0x3>
     686:	0f b6       	in	r0, 0x3f	; 63
     688:	f8 94       	cli
     68a:	de bf       	out	0x3e, r29	; 62
     68c:	0f be       	out	0x3f, r0	; 63
     68e:	cd bf       	out	0x3d, r28	; 61
     690:	6e 96       	adiw	r28, 0x1e	; 30
     692:	0f b6       	in	r0, 0x3f	; 63
     694:	f8 94       	cli
     696:	de bf       	out	0x3e, r29	; 62
     698:	0f be       	out	0x3f, r0	; 63
     69a:	cd bf       	out	0x3d, r28	; 61
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	1f 91       	pop	r17
     6a2:	0f 91       	pop	r16
     6a4:	ff 90       	pop	r15
     6a6:	ef 90       	pop	r14
     6a8:	df 90       	pop	r13
     6aa:	cf 90       	pop	r12
     6ac:	08 95       	ret

000006ae <__vector_30>:
ISR(USART1_RX_vect)
{
     6ae:	1f 92       	push	r1
     6b0:	0f 92       	push	r0
     6b2:	0f b6       	in	r0, 0x3f	; 63
     6b4:	0f 92       	push	r0
     6b6:	11 24       	eor	r1, r1
     6b8:	0b b6       	in	r0, 0x3b	; 59
     6ba:	0f 92       	push	r0
     6bc:	2f 93       	push	r18
     6be:	3f 93       	push	r19
     6c0:	4f 93       	push	r20
     6c2:	5f 93       	push	r21
     6c4:	6f 93       	push	r22
     6c6:	7f 93       	push	r23
     6c8:	8f 93       	push	r24
     6ca:	9f 93       	push	r25
     6cc:	af 93       	push	r26
     6ce:	bf 93       	push	r27
     6d0:	ef 93       	push	r30
     6d2:	ff 93       	push	r31
	maginfo = UDR1;
     6d4:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     6d8:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <maginfo>
	//transmit_UART0('x');
	
	transmit_UART0(maginfo);
     6dc:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <maginfo>
     6e0:	7a d0       	rcall	.+244    	; 0x7d6 <transmit_UART0>
	if(hex== 1){
     6e2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <hex>
     6e6:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <hex+0x1>
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	91 f4       	brne	.+36     	; 0x712 <__vector_30+0x64>
	B[n]= maginfo;
     6ee:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <n>
     6f2:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <n+0x1>
     6f6:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <maginfo>
     6fa:	fc 01       	movw	r30, r24
     6fc:	e2 5b       	subi	r30, 0xB2	; 178
     6fe:	fd 4f       	sbci	r31, 0xFD	; 253
     700:	20 83       	st	Z, r18
	n++;
     702:	01 96       	adiw	r24, 0x01	; 1
     704:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <n+0x1>
     708:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <n>
	
	if (n==6) {
     70c:	06 97       	sbiw	r24, 0x06	; 6
		mag_value();
     70e:	09 f4       	brne	.+2      	; 0x712 <__vector_30+0x64>
     710:	01 df       	rcall	.-510    	; 0x514 <mag_value>
	if(i==3)
	{
		message_ID();
		i=1;
	}*/
}
     712:	ff 91       	pop	r31
     714:	ef 91       	pop	r30
     716:	bf 91       	pop	r27
     718:	af 91       	pop	r26
     71a:	9f 91       	pop	r25
     71c:	8f 91       	pop	r24
     71e:	7f 91       	pop	r23
     720:	6f 91       	pop	r22
     722:	5f 91       	pop	r21
     724:	4f 91       	pop	r20
     726:	3f 91       	pop	r19
     728:	2f 91       	pop	r18
     72a:	0f 90       	pop	r0
     72c:	0b be       	out	0x3b, r0	; 59
     72e:	0f 90       	pop	r0
     730:	0f be       	out	0x3f, r0	; 63
     732:	0f 90       	pop	r0
     734:	1f 90       	pop	r1
     736:	18 95       	reti

00000738 <main>:
int main(void)
{
	//Initializations
	
	init_UART0();
	init_UART1();
     738:	21 d0       	rcall	.+66     	; 0x77c <init_UART0>
     73a:	31 d0       	rcall	.+98     	; 0x79e <init_UART1>
     73c:	2f ef       	ldi	r18, 0xFF	; 255
     73e:	83 ed       	ldi	r24, 0xD3	; 211
     740:	90 e3       	ldi	r25, 0x30	; 48
     742:	21 50       	subi	r18, 0x01	; 1
     744:	80 40       	sbci	r24, 0x00	; 0
     746:	90 40       	sbci	r25, 0x00	; 0
     748:	e1 f7       	brne	.-8      	; 0x742 <main+0xa>
     74a:	00 c0       	rjmp	.+0      	; 0x74c <main+0x14>
	for(int xx = 0;xx<3;xx++)
	{
		_delay_ms(2000);
		led_test_m_config();
     74c:	00 00       	nop
     74e:	6b de       	rcall	.-810    	; 0x426 <led_test_m_config>
     750:	2f ef       	ldi	r18, 0xFF	; 255
     752:	83 ed       	ldi	r24, 0xD3	; 211
     754:	90 e3       	ldi	r25, 0x30	; 48
     756:	21 50       	subi	r18, 0x01	; 1
     758:	80 40       	sbci	r24, 0x00	; 0
     75a:	90 40       	sbci	r25, 0x00	; 0
     75c:	e1 f7       	brne	.-8      	; 0x756 <main+0x1e>
     75e:	00 c0       	rjmp	.+0      	; 0x760 <main+0x28>
     760:	00 00       	nop
     762:	61 de       	rcall	.-830    	; 0x426 <led_test_m_config>
     764:	2f ef       	ldi	r18, 0xFF	; 255
     766:	83 ed       	ldi	r24, 0xD3	; 211
     768:	90 e3       	ldi	r25, 0x30	; 48
     76a:	21 50       	subi	r18, 0x01	; 1
     76c:	80 40       	sbci	r24, 0x00	; 0
     76e:	90 40       	sbci	r25, 0x00	; 0
     770:	e1 f7       	brne	.-8      	; 0x76a <main+0x32>
     772:	00 c0       	rjmp	.+0      	; 0x774 <main+0x3c>
     774:	00 00       	nop
     776:	57 de       	rcall	.-850    	; 0x426 <led_test_m_config>
	}
	//Interrupt
	sei();//global interrupt enable
     778:	78 94       	sei
     77a:	ff cf       	rjmp	.-2      	; 0x77a <main+0x42>

0000077c <init_UART0>:

uint8_t receive_UART0(void)
{
  while ((UCSR0A & (1 << RXC0)) == 0);
  return UDR0;
}
     77c:	1b b8       	out	0x0b, r1	; 11
     77e:	1a b8       	out	0x0a, r1	; 10
     780:	e5 e9       	ldi	r30, 0x95	; 149
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	10 82       	st	Z, r1
     786:	59 9a       	sbi	0x0b, 1	; 11
     788:	8a b1       	in	r24, 0x0a	; 10
     78a:	88 69       	ori	r24, 0x98	; 152
     78c:	8a b9       	out	0x0a, r24	; 10
     78e:	80 81       	ld	r24, Z
     790:	8e 60       	ori	r24, 0x0E	; 14
     792:	80 83       	st	Z, r24
     794:	87 e6       	ldi	r24, 0x67	; 103
     796:	89 b9       	out	0x09, r24	; 9
     798:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
     79c:	08 95       	ret

0000079e <init_UART1>:
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
     7a2:	cb e9       	ldi	r28, 0x9B	; 155
     7a4:	d0 e0       	ldi	r29, 0x00	; 0
     7a6:	18 82       	st	Y, r1
     7a8:	aa e9       	ldi	r26, 0x9A	; 154
     7aa:	b0 e0       	ldi	r27, 0x00	; 0
     7ac:	1c 92       	st	X, r1
     7ae:	ed e9       	ldi	r30, 0x9D	; 157
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	10 82       	st	Z, r1
     7b4:	88 81       	ld	r24, Y
     7b6:	82 60       	ori	r24, 0x02	; 2
     7b8:	88 83       	st	Y, r24
     7ba:	8c 91       	ld	r24, X
     7bc:	88 69       	ori	r24, 0x98	; 152
     7be:	8c 93       	st	X, r24
     7c0:	80 81       	ld	r24, Z
     7c2:	8e 60       	ori	r24, 0x0E	; 14
     7c4:	80 83       	st	Z, r24
     7c6:	87 e6       	ldi	r24, 0x67	; 103
     7c8:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     7cc:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	08 95       	ret

000007d6 <transmit_UART0>:
     7d6:	5d 9b       	sbis	0x0b, 5	; 11
     7d8:	fe cf       	rjmp	.-4      	; 0x7d6 <transmit_UART0>
     7da:	8c b9       	out	0x0c, r24	; 12
     7dc:	08 95       	ret

000007de <transmit_string_UART1>:

void transmit_string_UART1(char *buffer)
{
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
     7e2:	fc 01       	movw	r30, r24
     7e4:	20 81       	ld	r18, Z
     7e6:	22 23       	and	r18, r18
     7e8:	69 f0       	breq	.+26     	; 0x804 <transmit_string_UART1+0x26>
     7ea:	dc 01       	movw	r26, r24
     7ec:	11 96       	adiw	r26, 0x01	; 1
  	{
    	///* Wait for empty transmit buffer 
    	while ( !(UCSR1A & (_BV(UDRE1))) );
     7ee:	eb e9       	ldi	r30, 0x9B	; 155
     7f0:	f0 e0       	ldi	r31, 0x00	; 0
    	///* Start transmission
    	UDR1 = buffer[i];
     7f2:	cc e9       	ldi	r28, 0x9C	; 156
     7f4:	d0 e0       	ldi	r29, 0x00	; 0
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
  	{
    	///* Wait for empty transmit buffer 
    	while ( !(UCSR1A & (_BV(UDRE1))) );
     7f6:	90 81       	ld	r25, Z
     7f8:	95 ff       	sbrs	r25, 5
     7fa:	fd cf       	rjmp	.-6      	; 0x7f6 <transmit_string_UART1+0x18>
    	///* Start transmission
    	UDR1 = buffer[i];
     7fc:	28 83       	st	Y, r18

void transmit_string_UART1(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
     7fe:	2d 91       	ld	r18, X+
     800:	21 11       	cpse	r18, r1
     802:	f9 cf       	rjmp	.-14     	; 0x7f6 <transmit_string_UART1+0x18>
    	while ( !(UCSR1A & (_BV(UDRE1))) );
    	///* Start transmission
    	UDR1 = buffer[i];
		i++;	
	}
}
     804:	df 91       	pop	r29
     806:	cf 91       	pop	r28
     808:	08 95       	ret

0000080a <transmit_string_UART0>:


void transmit_string_UART0(char *buffer)
{
     80a:	fc 01       	movw	r30, r24
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
     80c:	90 81       	ld	r25, Z
     80e:	99 23       	and	r25, r25
     810:	39 f0       	breq	.+14     	; 0x820 <transmit_string_UART0+0x16>
     812:	31 96       	adiw	r30, 0x01	; 1
  	{
    	///* Wait for empty transmit buffer 
    	while ( !(UCSR0A & (_BV(UDRE0))) );
     814:	5d 9b       	sbis	0x0b, 5	; 11
     816:	fe cf       	rjmp	.-4      	; 0x814 <transmit_string_UART0+0xa>
    	///* Start transmission
    	UDR0 = buffer[i];
     818:	9c b9       	out	0x0c, r25	; 12

void transmit_string_UART0(char *buffer)
{
  	uint16_t i = 0;
  	///Loop through the data
  	while(buffer[i] != '\0')
     81a:	91 91       	ld	r25, Z+
     81c:	91 11       	cpse	r25, r1
     81e:	fa cf       	rjmp	.-12     	; 0x814 <transmit_string_UART0+0xa>
     820:	08 95       	ret

00000822 <__subsf3>:
     822:	50 58       	subi	r21, 0x80	; 128

00000824 <__addsf3>:
     824:	bb 27       	eor	r27, r27
     826:	aa 27       	eor	r26, r26
     828:	0e d0       	rcall	.+28     	; 0x846 <__addsf3x>
     82a:	1c c1       	rjmp	.+568    	; 0xa64 <__fp_round>
     82c:	0d d1       	rcall	.+538    	; 0xa48 <__fp_pscA>
     82e:	30 f0       	brcs	.+12     	; 0x83c <__addsf3+0x18>
     830:	12 d1       	rcall	.+548    	; 0xa56 <__fp_pscB>
     832:	20 f0       	brcs	.+8      	; 0x83c <__addsf3+0x18>
     834:	31 f4       	brne	.+12     	; 0x842 <__addsf3+0x1e>
     836:	9f 3f       	cpi	r25, 0xFF	; 255
     838:	11 f4       	brne	.+4      	; 0x83e <__addsf3+0x1a>
     83a:	1e f4       	brtc	.+6      	; 0x842 <__addsf3+0x1e>
     83c:	02 c1       	rjmp	.+516    	; 0xa42 <__fp_nan>
     83e:	0e f4       	brtc	.+2      	; 0x842 <__addsf3+0x1e>
     840:	e0 95       	com	r30
     842:	e7 fb       	bst	r30, 7
     844:	f8 c0       	rjmp	.+496    	; 0xa36 <__fp_inf>

00000846 <__addsf3x>:
     846:	e9 2f       	mov	r30, r25
     848:	1e d1       	rcall	.+572    	; 0xa86 <__fp_split3>
     84a:	80 f3       	brcs	.-32     	; 0x82c <__addsf3+0x8>
     84c:	ba 17       	cp	r27, r26
     84e:	62 07       	cpc	r22, r18
     850:	73 07       	cpc	r23, r19
     852:	84 07       	cpc	r24, r20
     854:	95 07       	cpc	r25, r21
     856:	18 f0       	brcs	.+6      	; 0x85e <__addsf3x+0x18>
     858:	71 f4       	brne	.+28     	; 0x876 <__addsf3x+0x30>
     85a:	9e f5       	brtc	.+102    	; 0x8c2 <__addsf3x+0x7c>
     85c:	36 c1       	rjmp	.+620    	; 0xaca <__fp_zero>
     85e:	0e f4       	brtc	.+2      	; 0x862 <__addsf3x+0x1c>
     860:	e0 95       	com	r30
     862:	0b 2e       	mov	r0, r27
     864:	ba 2f       	mov	r27, r26
     866:	a0 2d       	mov	r26, r0
     868:	0b 01       	movw	r0, r22
     86a:	b9 01       	movw	r22, r18
     86c:	90 01       	movw	r18, r0
     86e:	0c 01       	movw	r0, r24
     870:	ca 01       	movw	r24, r20
     872:	a0 01       	movw	r20, r0
     874:	11 24       	eor	r1, r1
     876:	ff 27       	eor	r31, r31
     878:	59 1b       	sub	r21, r25
     87a:	99 f0       	breq	.+38     	; 0x8a2 <__addsf3x+0x5c>
     87c:	59 3f       	cpi	r21, 0xF9	; 249
     87e:	50 f4       	brcc	.+20     	; 0x894 <__addsf3x+0x4e>
     880:	50 3e       	cpi	r21, 0xE0	; 224
     882:	68 f1       	brcs	.+90     	; 0x8de <__addsf3x+0x98>
     884:	1a 16       	cp	r1, r26
     886:	f0 40       	sbci	r31, 0x00	; 0
     888:	a2 2f       	mov	r26, r18
     88a:	23 2f       	mov	r18, r19
     88c:	34 2f       	mov	r19, r20
     88e:	44 27       	eor	r20, r20
     890:	58 5f       	subi	r21, 0xF8	; 248
     892:	f3 cf       	rjmp	.-26     	; 0x87a <__addsf3x+0x34>
     894:	46 95       	lsr	r20
     896:	37 95       	ror	r19
     898:	27 95       	ror	r18
     89a:	a7 95       	ror	r26
     89c:	f0 40       	sbci	r31, 0x00	; 0
     89e:	53 95       	inc	r21
     8a0:	c9 f7       	brne	.-14     	; 0x894 <__addsf3x+0x4e>
     8a2:	7e f4       	brtc	.+30     	; 0x8c2 <__addsf3x+0x7c>
     8a4:	1f 16       	cp	r1, r31
     8a6:	ba 0b       	sbc	r27, r26
     8a8:	62 0b       	sbc	r22, r18
     8aa:	73 0b       	sbc	r23, r19
     8ac:	84 0b       	sbc	r24, r20
     8ae:	ba f0       	brmi	.+46     	; 0x8de <__addsf3x+0x98>
     8b0:	91 50       	subi	r25, 0x01	; 1
     8b2:	a1 f0       	breq	.+40     	; 0x8dc <__addsf3x+0x96>
     8b4:	ff 0f       	add	r31, r31
     8b6:	bb 1f       	adc	r27, r27
     8b8:	66 1f       	adc	r22, r22
     8ba:	77 1f       	adc	r23, r23
     8bc:	88 1f       	adc	r24, r24
     8be:	c2 f7       	brpl	.-16     	; 0x8b0 <__addsf3x+0x6a>
     8c0:	0e c0       	rjmp	.+28     	; 0x8de <__addsf3x+0x98>
     8c2:	ba 0f       	add	r27, r26
     8c4:	62 1f       	adc	r22, r18
     8c6:	73 1f       	adc	r23, r19
     8c8:	84 1f       	adc	r24, r20
     8ca:	48 f4       	brcc	.+18     	; 0x8de <__addsf3x+0x98>
     8cc:	87 95       	ror	r24
     8ce:	77 95       	ror	r23
     8d0:	67 95       	ror	r22
     8d2:	b7 95       	ror	r27
     8d4:	f7 95       	ror	r31
     8d6:	9e 3f       	cpi	r25, 0xFE	; 254
     8d8:	08 f0       	brcs	.+2      	; 0x8dc <__addsf3x+0x96>
     8da:	b3 cf       	rjmp	.-154    	; 0x842 <__addsf3+0x1e>
     8dc:	93 95       	inc	r25
     8de:	88 0f       	add	r24, r24
     8e0:	08 f0       	brcs	.+2      	; 0x8e4 <__addsf3x+0x9e>
     8e2:	99 27       	eor	r25, r25
     8e4:	ee 0f       	add	r30, r30
     8e6:	97 95       	ror	r25
     8e8:	87 95       	ror	r24
     8ea:	08 95       	ret

000008ec <__divsf3>:
     8ec:	0c d0       	rcall	.+24     	; 0x906 <__divsf3x>
     8ee:	ba c0       	rjmp	.+372    	; 0xa64 <__fp_round>
     8f0:	b2 d0       	rcall	.+356    	; 0xa56 <__fp_pscB>
     8f2:	40 f0       	brcs	.+16     	; 0x904 <__divsf3+0x18>
     8f4:	a9 d0       	rcall	.+338    	; 0xa48 <__fp_pscA>
     8f6:	30 f0       	brcs	.+12     	; 0x904 <__divsf3+0x18>
     8f8:	21 f4       	brne	.+8      	; 0x902 <__divsf3+0x16>
     8fa:	5f 3f       	cpi	r21, 0xFF	; 255
     8fc:	19 f0       	breq	.+6      	; 0x904 <__divsf3+0x18>
     8fe:	9b c0       	rjmp	.+310    	; 0xa36 <__fp_inf>
     900:	51 11       	cpse	r21, r1
     902:	e4 c0       	rjmp	.+456    	; 0xacc <__fp_szero>
     904:	9e c0       	rjmp	.+316    	; 0xa42 <__fp_nan>

00000906 <__divsf3x>:
     906:	bf d0       	rcall	.+382    	; 0xa86 <__fp_split3>
     908:	98 f3       	brcs	.-26     	; 0x8f0 <__divsf3+0x4>

0000090a <__divsf3_pse>:
     90a:	99 23       	and	r25, r25
     90c:	c9 f3       	breq	.-14     	; 0x900 <__divsf3+0x14>
     90e:	55 23       	and	r21, r21
     910:	b1 f3       	breq	.-20     	; 0x8fe <__divsf3+0x12>
     912:	95 1b       	sub	r25, r21
     914:	55 0b       	sbc	r21, r21
     916:	bb 27       	eor	r27, r27
     918:	aa 27       	eor	r26, r26
     91a:	62 17       	cp	r22, r18
     91c:	73 07       	cpc	r23, r19
     91e:	84 07       	cpc	r24, r20
     920:	38 f0       	brcs	.+14     	; 0x930 <__divsf3_pse+0x26>
     922:	9f 5f       	subi	r25, 0xFF	; 255
     924:	5f 4f       	sbci	r21, 0xFF	; 255
     926:	22 0f       	add	r18, r18
     928:	33 1f       	adc	r19, r19
     92a:	44 1f       	adc	r20, r20
     92c:	aa 1f       	adc	r26, r26
     92e:	a9 f3       	breq	.-22     	; 0x91a <__divsf3_pse+0x10>
     930:	33 d0       	rcall	.+102    	; 0x998 <__divsf3_pse+0x8e>
     932:	0e 2e       	mov	r0, r30
     934:	3a f0       	brmi	.+14     	; 0x944 <__divsf3_pse+0x3a>
     936:	e0 e8       	ldi	r30, 0x80	; 128
     938:	30 d0       	rcall	.+96     	; 0x99a <__divsf3_pse+0x90>
     93a:	91 50       	subi	r25, 0x01	; 1
     93c:	50 40       	sbci	r21, 0x00	; 0
     93e:	e6 95       	lsr	r30
     940:	00 1c       	adc	r0, r0
     942:	ca f7       	brpl	.-14     	; 0x936 <__divsf3_pse+0x2c>
     944:	29 d0       	rcall	.+82     	; 0x998 <__divsf3_pse+0x8e>
     946:	fe 2f       	mov	r31, r30
     948:	27 d0       	rcall	.+78     	; 0x998 <__divsf3_pse+0x8e>
     94a:	66 0f       	add	r22, r22
     94c:	77 1f       	adc	r23, r23
     94e:	88 1f       	adc	r24, r24
     950:	bb 1f       	adc	r27, r27
     952:	26 17       	cp	r18, r22
     954:	37 07       	cpc	r19, r23
     956:	48 07       	cpc	r20, r24
     958:	ab 07       	cpc	r26, r27
     95a:	b0 e8       	ldi	r27, 0x80	; 128
     95c:	09 f0       	breq	.+2      	; 0x960 <__divsf3_pse+0x56>
     95e:	bb 0b       	sbc	r27, r27
     960:	80 2d       	mov	r24, r0
     962:	bf 01       	movw	r22, r30
     964:	ff 27       	eor	r31, r31
     966:	93 58       	subi	r25, 0x83	; 131
     968:	5f 4f       	sbci	r21, 0xFF	; 255
     96a:	2a f0       	brmi	.+10     	; 0x976 <__divsf3_pse+0x6c>
     96c:	9e 3f       	cpi	r25, 0xFE	; 254
     96e:	51 05       	cpc	r21, r1
     970:	68 f0       	brcs	.+26     	; 0x98c <__divsf3_pse+0x82>
     972:	61 c0       	rjmp	.+194    	; 0xa36 <__fp_inf>
     974:	ab c0       	rjmp	.+342    	; 0xacc <__fp_szero>
     976:	5f 3f       	cpi	r21, 0xFF	; 255
     978:	ec f3       	brlt	.-6      	; 0x974 <__divsf3_pse+0x6a>
     97a:	98 3e       	cpi	r25, 0xE8	; 232
     97c:	dc f3       	brlt	.-10     	; 0x974 <__divsf3_pse+0x6a>
     97e:	86 95       	lsr	r24
     980:	77 95       	ror	r23
     982:	67 95       	ror	r22
     984:	b7 95       	ror	r27
     986:	f7 95       	ror	r31
     988:	9f 5f       	subi	r25, 0xFF	; 255
     98a:	c9 f7       	brne	.-14     	; 0x97e <__divsf3_pse+0x74>
     98c:	88 0f       	add	r24, r24
     98e:	91 1d       	adc	r25, r1
     990:	96 95       	lsr	r25
     992:	87 95       	ror	r24
     994:	97 f9       	bld	r25, 7
     996:	08 95       	ret
     998:	e1 e0       	ldi	r30, 0x01	; 1
     99a:	66 0f       	add	r22, r22
     99c:	77 1f       	adc	r23, r23
     99e:	88 1f       	adc	r24, r24
     9a0:	bb 1f       	adc	r27, r27
     9a2:	62 17       	cp	r22, r18
     9a4:	73 07       	cpc	r23, r19
     9a6:	84 07       	cpc	r24, r20
     9a8:	ba 07       	cpc	r27, r26
     9aa:	20 f0       	brcs	.+8      	; 0x9b4 <__divsf3_pse+0xaa>
     9ac:	62 1b       	sub	r22, r18
     9ae:	73 0b       	sbc	r23, r19
     9b0:	84 0b       	sbc	r24, r20
     9b2:	ba 0b       	sbc	r27, r26
     9b4:	ee 1f       	adc	r30, r30
     9b6:	88 f7       	brcc	.-30     	; 0x99a <__divsf3_pse+0x90>
     9b8:	e0 95       	com	r30
     9ba:	08 95       	ret

000009bc <__floatunsisf>:
     9bc:	e8 94       	clt
     9be:	09 c0       	rjmp	.+18     	; 0x9d2 <__floatsisf+0x12>

000009c0 <__floatsisf>:
     9c0:	97 fb       	bst	r25, 7
     9c2:	3e f4       	brtc	.+14     	; 0x9d2 <__floatsisf+0x12>
     9c4:	90 95       	com	r25
     9c6:	80 95       	com	r24
     9c8:	70 95       	com	r23
     9ca:	61 95       	neg	r22
     9cc:	7f 4f       	sbci	r23, 0xFF	; 255
     9ce:	8f 4f       	sbci	r24, 0xFF	; 255
     9d0:	9f 4f       	sbci	r25, 0xFF	; 255
     9d2:	99 23       	and	r25, r25
     9d4:	a9 f0       	breq	.+42     	; 0xa00 <__floatsisf+0x40>
     9d6:	f9 2f       	mov	r31, r25
     9d8:	96 e9       	ldi	r25, 0x96	; 150
     9da:	bb 27       	eor	r27, r27
     9dc:	93 95       	inc	r25
     9de:	f6 95       	lsr	r31
     9e0:	87 95       	ror	r24
     9e2:	77 95       	ror	r23
     9e4:	67 95       	ror	r22
     9e6:	b7 95       	ror	r27
     9e8:	f1 11       	cpse	r31, r1
     9ea:	f8 cf       	rjmp	.-16     	; 0x9dc <__floatsisf+0x1c>
     9ec:	fa f4       	brpl	.+62     	; 0xa2c <__floatsisf+0x6c>
     9ee:	bb 0f       	add	r27, r27
     9f0:	11 f4       	brne	.+4      	; 0x9f6 <__floatsisf+0x36>
     9f2:	60 ff       	sbrs	r22, 0
     9f4:	1b c0       	rjmp	.+54     	; 0xa2c <__floatsisf+0x6c>
     9f6:	6f 5f       	subi	r22, 0xFF	; 255
     9f8:	7f 4f       	sbci	r23, 0xFF	; 255
     9fa:	8f 4f       	sbci	r24, 0xFF	; 255
     9fc:	9f 4f       	sbci	r25, 0xFF	; 255
     9fe:	16 c0       	rjmp	.+44     	; 0xa2c <__floatsisf+0x6c>
     a00:	88 23       	and	r24, r24
     a02:	11 f0       	breq	.+4      	; 0xa08 <__floatsisf+0x48>
     a04:	96 e9       	ldi	r25, 0x96	; 150
     a06:	11 c0       	rjmp	.+34     	; 0xa2a <__floatsisf+0x6a>
     a08:	77 23       	and	r23, r23
     a0a:	21 f0       	breq	.+8      	; 0xa14 <__floatsisf+0x54>
     a0c:	9e e8       	ldi	r25, 0x8E	; 142
     a0e:	87 2f       	mov	r24, r23
     a10:	76 2f       	mov	r23, r22
     a12:	05 c0       	rjmp	.+10     	; 0xa1e <__floatsisf+0x5e>
     a14:	66 23       	and	r22, r22
     a16:	71 f0       	breq	.+28     	; 0xa34 <__floatsisf+0x74>
     a18:	96 e8       	ldi	r25, 0x86	; 134
     a1a:	86 2f       	mov	r24, r22
     a1c:	70 e0       	ldi	r23, 0x00	; 0
     a1e:	60 e0       	ldi	r22, 0x00	; 0
     a20:	2a f0       	brmi	.+10     	; 0xa2c <__floatsisf+0x6c>
     a22:	9a 95       	dec	r25
     a24:	66 0f       	add	r22, r22
     a26:	77 1f       	adc	r23, r23
     a28:	88 1f       	adc	r24, r24
     a2a:	da f7       	brpl	.-10     	; 0xa22 <__floatsisf+0x62>
     a2c:	88 0f       	add	r24, r24
     a2e:	96 95       	lsr	r25
     a30:	87 95       	ror	r24
     a32:	97 f9       	bld	r25, 7
     a34:	08 95       	ret

00000a36 <__fp_inf>:
     a36:	97 f9       	bld	r25, 7
     a38:	9f 67       	ori	r25, 0x7F	; 127
     a3a:	80 e8       	ldi	r24, 0x80	; 128
     a3c:	70 e0       	ldi	r23, 0x00	; 0
     a3e:	60 e0       	ldi	r22, 0x00	; 0
     a40:	08 95       	ret

00000a42 <__fp_nan>:
     a42:	9f ef       	ldi	r25, 0xFF	; 255
     a44:	80 ec       	ldi	r24, 0xC0	; 192
     a46:	08 95       	ret

00000a48 <__fp_pscA>:
     a48:	00 24       	eor	r0, r0
     a4a:	0a 94       	dec	r0
     a4c:	16 16       	cp	r1, r22
     a4e:	17 06       	cpc	r1, r23
     a50:	18 06       	cpc	r1, r24
     a52:	09 06       	cpc	r0, r25
     a54:	08 95       	ret

00000a56 <__fp_pscB>:
     a56:	00 24       	eor	r0, r0
     a58:	0a 94       	dec	r0
     a5a:	12 16       	cp	r1, r18
     a5c:	13 06       	cpc	r1, r19
     a5e:	14 06       	cpc	r1, r20
     a60:	05 06       	cpc	r0, r21
     a62:	08 95       	ret

00000a64 <__fp_round>:
     a64:	09 2e       	mov	r0, r25
     a66:	03 94       	inc	r0
     a68:	00 0c       	add	r0, r0
     a6a:	11 f4       	brne	.+4      	; 0xa70 <__fp_round+0xc>
     a6c:	88 23       	and	r24, r24
     a6e:	52 f0       	brmi	.+20     	; 0xa84 <__fp_round+0x20>
     a70:	bb 0f       	add	r27, r27
     a72:	40 f4       	brcc	.+16     	; 0xa84 <__fp_round+0x20>
     a74:	bf 2b       	or	r27, r31
     a76:	11 f4       	brne	.+4      	; 0xa7c <__fp_round+0x18>
     a78:	60 ff       	sbrs	r22, 0
     a7a:	04 c0       	rjmp	.+8      	; 0xa84 <__fp_round+0x20>
     a7c:	6f 5f       	subi	r22, 0xFF	; 255
     a7e:	7f 4f       	sbci	r23, 0xFF	; 255
     a80:	8f 4f       	sbci	r24, 0xFF	; 255
     a82:	9f 4f       	sbci	r25, 0xFF	; 255
     a84:	08 95       	ret

00000a86 <__fp_split3>:
     a86:	57 fd       	sbrc	r21, 7
     a88:	90 58       	subi	r25, 0x80	; 128
     a8a:	44 0f       	add	r20, r20
     a8c:	55 1f       	adc	r21, r21
     a8e:	59 f0       	breq	.+22     	; 0xaa6 <__fp_splitA+0x10>
     a90:	5f 3f       	cpi	r21, 0xFF	; 255
     a92:	71 f0       	breq	.+28     	; 0xab0 <__fp_splitA+0x1a>
     a94:	47 95       	ror	r20

00000a96 <__fp_splitA>:
     a96:	88 0f       	add	r24, r24
     a98:	97 fb       	bst	r25, 7
     a9a:	99 1f       	adc	r25, r25
     a9c:	61 f0       	breq	.+24     	; 0xab6 <__fp_splitA+0x20>
     a9e:	9f 3f       	cpi	r25, 0xFF	; 255
     aa0:	79 f0       	breq	.+30     	; 0xac0 <__fp_splitA+0x2a>
     aa2:	87 95       	ror	r24
     aa4:	08 95       	ret
     aa6:	12 16       	cp	r1, r18
     aa8:	13 06       	cpc	r1, r19
     aaa:	14 06       	cpc	r1, r20
     aac:	55 1f       	adc	r21, r21
     aae:	f2 cf       	rjmp	.-28     	; 0xa94 <__fp_split3+0xe>
     ab0:	46 95       	lsr	r20
     ab2:	f1 df       	rcall	.-30     	; 0xa96 <__fp_splitA>
     ab4:	08 c0       	rjmp	.+16     	; 0xac6 <__fp_splitA+0x30>
     ab6:	16 16       	cp	r1, r22
     ab8:	17 06       	cpc	r1, r23
     aba:	18 06       	cpc	r1, r24
     abc:	99 1f       	adc	r25, r25
     abe:	f1 cf       	rjmp	.-30     	; 0xaa2 <__fp_splitA+0xc>
     ac0:	86 95       	lsr	r24
     ac2:	71 05       	cpc	r23, r1
     ac4:	61 05       	cpc	r22, r1
     ac6:	08 94       	sec
     ac8:	08 95       	ret

00000aca <__fp_zero>:
     aca:	e8 94       	clt

00000acc <__fp_szero>:
     acc:	bb 27       	eor	r27, r27
     ace:	66 27       	eor	r22, r22
     ad0:	77 27       	eor	r23, r23
     ad2:	cb 01       	movw	r24, r22
     ad4:	97 f9       	bld	r25, 7
     ad6:	08 95       	ret

00000ad8 <sprintf>:
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	cd b7       	in	r28, 0x3d	; 61
     ae2:	de b7       	in	r29, 0x3e	; 62
     ae4:	2e 97       	sbiw	r28, 0x0e	; 14
     ae6:	0f b6       	in	r0, 0x3f	; 63
     ae8:	f8 94       	cli
     aea:	de bf       	out	0x3e, r29	; 62
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	cd bf       	out	0x3d, r28	; 61
     af0:	0d 89       	ldd	r16, Y+21	; 0x15
     af2:	1e 89       	ldd	r17, Y+22	; 0x16
     af4:	86 e0       	ldi	r24, 0x06	; 6
     af6:	8c 83       	std	Y+4, r24	; 0x04
     af8:	1a 83       	std	Y+2, r17	; 0x02
     afa:	09 83       	std	Y+1, r16	; 0x01
     afc:	8f ef       	ldi	r24, 0xFF	; 255
     afe:	9f e7       	ldi	r25, 0x7F	; 127
     b00:	9e 83       	std	Y+6, r25	; 0x06
     b02:	8d 83       	std	Y+5, r24	; 0x05
     b04:	ae 01       	movw	r20, r28
     b06:	47 5e       	subi	r20, 0xE7	; 231
     b08:	5f 4f       	sbci	r21, 0xFF	; 255
     b0a:	6f 89       	ldd	r22, Y+23	; 0x17
     b0c:	78 8d       	ldd	r23, Y+24	; 0x18
     b0e:	ce 01       	movw	r24, r28
     b10:	01 96       	adiw	r24, 0x01	; 1
     b12:	10 d0       	rcall	.+32     	; 0xb34 <vfprintf>
     b14:	ef 81       	ldd	r30, Y+7	; 0x07
     b16:	f8 85       	ldd	r31, Y+8	; 0x08
     b18:	e0 0f       	add	r30, r16
     b1a:	f1 1f       	adc	r31, r17
     b1c:	10 82       	st	Z, r1
     b1e:	2e 96       	adiw	r28, 0x0e	; 14
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	f8 94       	cli
     b24:	de bf       	out	0x3e, r29	; 62
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	cd bf       	out	0x3d, r28	; 61
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	1f 91       	pop	r17
     b30:	0f 91       	pop	r16
     b32:	08 95       	ret

00000b34 <vfprintf>:
     b34:	2f 92       	push	r2
     b36:	3f 92       	push	r3
     b38:	4f 92       	push	r4
     b3a:	5f 92       	push	r5
     b3c:	6f 92       	push	r6
     b3e:	7f 92       	push	r7
     b40:	8f 92       	push	r8
     b42:	9f 92       	push	r9
     b44:	af 92       	push	r10
     b46:	bf 92       	push	r11
     b48:	cf 92       	push	r12
     b4a:	df 92       	push	r13
     b4c:	ef 92       	push	r14
     b4e:	ff 92       	push	r15
     b50:	0f 93       	push	r16
     b52:	1f 93       	push	r17
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
     b58:	cd b7       	in	r28, 0x3d	; 61
     b5a:	de b7       	in	r29, 0x3e	; 62
     b5c:	2b 97       	sbiw	r28, 0x0b	; 11
     b5e:	0f b6       	in	r0, 0x3f	; 63
     b60:	f8 94       	cli
     b62:	de bf       	out	0x3e, r29	; 62
     b64:	0f be       	out	0x3f, r0	; 63
     b66:	cd bf       	out	0x3d, r28	; 61
     b68:	6c 01       	movw	r12, r24
     b6a:	7b 01       	movw	r14, r22
     b6c:	8a 01       	movw	r16, r20
     b6e:	fc 01       	movw	r30, r24
     b70:	17 82       	std	Z+7, r1	; 0x07
     b72:	16 82       	std	Z+6, r1	; 0x06
     b74:	83 81       	ldd	r24, Z+3	; 0x03
     b76:	81 ff       	sbrs	r24, 1
     b78:	bf c1       	rjmp	.+894    	; 0xef8 <vfprintf+0x3c4>
     b7a:	ce 01       	movw	r24, r28
     b7c:	01 96       	adiw	r24, 0x01	; 1
     b7e:	3c 01       	movw	r6, r24
     b80:	f6 01       	movw	r30, r12
     b82:	93 81       	ldd	r25, Z+3	; 0x03
     b84:	f7 01       	movw	r30, r14
     b86:	93 fd       	sbrc	r25, 3
     b88:	85 91       	lpm	r24, Z+
     b8a:	93 ff       	sbrs	r25, 3
     b8c:	81 91       	ld	r24, Z+
     b8e:	7f 01       	movw	r14, r30
     b90:	88 23       	and	r24, r24
     b92:	09 f4       	brne	.+2      	; 0xb96 <vfprintf+0x62>
     b94:	ad c1       	rjmp	.+858    	; 0xef0 <vfprintf+0x3bc>
     b96:	85 32       	cpi	r24, 0x25	; 37
     b98:	39 f4       	brne	.+14     	; 0xba8 <vfprintf+0x74>
     b9a:	93 fd       	sbrc	r25, 3
     b9c:	85 91       	lpm	r24, Z+
     b9e:	93 ff       	sbrs	r25, 3
     ba0:	81 91       	ld	r24, Z+
     ba2:	7f 01       	movw	r14, r30
     ba4:	85 32       	cpi	r24, 0x25	; 37
     ba6:	21 f4       	brne	.+8      	; 0xbb0 <vfprintf+0x7c>
     ba8:	b6 01       	movw	r22, r12
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	d6 d1       	rcall	.+940    	; 0xf5a <fputc>
     bae:	e8 cf       	rjmp	.-48     	; 0xb80 <vfprintf+0x4c>
     bb0:	91 2c       	mov	r9, r1
     bb2:	21 2c       	mov	r2, r1
     bb4:	31 2c       	mov	r3, r1
     bb6:	ff e1       	ldi	r31, 0x1F	; 31
     bb8:	f3 15       	cp	r31, r3
     bba:	d8 f0       	brcs	.+54     	; 0xbf2 <vfprintf+0xbe>
     bbc:	8b 32       	cpi	r24, 0x2B	; 43
     bbe:	79 f0       	breq	.+30     	; 0xbde <vfprintf+0xaa>
     bc0:	38 f4       	brcc	.+14     	; 0xbd0 <vfprintf+0x9c>
     bc2:	80 32       	cpi	r24, 0x20	; 32
     bc4:	79 f0       	breq	.+30     	; 0xbe4 <vfprintf+0xb0>
     bc6:	83 32       	cpi	r24, 0x23	; 35
     bc8:	a1 f4       	brne	.+40     	; 0xbf2 <vfprintf+0xbe>
     bca:	23 2d       	mov	r18, r3
     bcc:	20 61       	ori	r18, 0x10	; 16
     bce:	1d c0       	rjmp	.+58     	; 0xc0a <vfprintf+0xd6>
     bd0:	8d 32       	cpi	r24, 0x2D	; 45
     bd2:	61 f0       	breq	.+24     	; 0xbec <vfprintf+0xb8>
     bd4:	80 33       	cpi	r24, 0x30	; 48
     bd6:	69 f4       	brne	.+26     	; 0xbf2 <vfprintf+0xbe>
     bd8:	23 2d       	mov	r18, r3
     bda:	21 60       	ori	r18, 0x01	; 1
     bdc:	16 c0       	rjmp	.+44     	; 0xc0a <vfprintf+0xd6>
     bde:	83 2d       	mov	r24, r3
     be0:	82 60       	ori	r24, 0x02	; 2
     be2:	38 2e       	mov	r3, r24
     be4:	e3 2d       	mov	r30, r3
     be6:	e4 60       	ori	r30, 0x04	; 4
     be8:	3e 2e       	mov	r3, r30
     bea:	2a c0       	rjmp	.+84     	; 0xc40 <vfprintf+0x10c>
     bec:	f3 2d       	mov	r31, r3
     bee:	f8 60       	ori	r31, 0x08	; 8
     bf0:	1d c0       	rjmp	.+58     	; 0xc2c <vfprintf+0xf8>
     bf2:	37 fc       	sbrc	r3, 7
     bf4:	2d c0       	rjmp	.+90     	; 0xc50 <vfprintf+0x11c>
     bf6:	20 ed       	ldi	r18, 0xD0	; 208
     bf8:	28 0f       	add	r18, r24
     bfa:	2a 30       	cpi	r18, 0x0A	; 10
     bfc:	40 f0       	brcs	.+16     	; 0xc0e <vfprintf+0xda>
     bfe:	8e 32       	cpi	r24, 0x2E	; 46
     c00:	b9 f4       	brne	.+46     	; 0xc30 <vfprintf+0xfc>
     c02:	36 fc       	sbrc	r3, 6
     c04:	75 c1       	rjmp	.+746    	; 0xef0 <vfprintf+0x3bc>
     c06:	23 2d       	mov	r18, r3
     c08:	20 64       	ori	r18, 0x40	; 64
     c0a:	32 2e       	mov	r3, r18
     c0c:	19 c0       	rjmp	.+50     	; 0xc40 <vfprintf+0x10c>
     c0e:	36 fe       	sbrs	r3, 6
     c10:	06 c0       	rjmp	.+12     	; 0xc1e <vfprintf+0xea>
     c12:	8a e0       	ldi	r24, 0x0A	; 10
     c14:	98 9e       	mul	r9, r24
     c16:	20 0d       	add	r18, r0
     c18:	11 24       	eor	r1, r1
     c1a:	92 2e       	mov	r9, r18
     c1c:	11 c0       	rjmp	.+34     	; 0xc40 <vfprintf+0x10c>
     c1e:	ea e0       	ldi	r30, 0x0A	; 10
     c20:	2e 9e       	mul	r2, r30
     c22:	20 0d       	add	r18, r0
     c24:	11 24       	eor	r1, r1
     c26:	22 2e       	mov	r2, r18
     c28:	f3 2d       	mov	r31, r3
     c2a:	f0 62       	ori	r31, 0x20	; 32
     c2c:	3f 2e       	mov	r3, r31
     c2e:	08 c0       	rjmp	.+16     	; 0xc40 <vfprintf+0x10c>
     c30:	8c 36       	cpi	r24, 0x6C	; 108
     c32:	21 f4       	brne	.+8      	; 0xc3c <vfprintf+0x108>
     c34:	83 2d       	mov	r24, r3
     c36:	80 68       	ori	r24, 0x80	; 128
     c38:	38 2e       	mov	r3, r24
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <vfprintf+0x10c>
     c3c:	88 36       	cpi	r24, 0x68	; 104
     c3e:	41 f4       	brne	.+16     	; 0xc50 <vfprintf+0x11c>
     c40:	f7 01       	movw	r30, r14
     c42:	93 fd       	sbrc	r25, 3
     c44:	85 91       	lpm	r24, Z+
     c46:	93 ff       	sbrs	r25, 3
     c48:	81 91       	ld	r24, Z+
     c4a:	7f 01       	movw	r14, r30
     c4c:	81 11       	cpse	r24, r1
     c4e:	b3 cf       	rjmp	.-154    	; 0xbb6 <vfprintf+0x82>
     c50:	98 2f       	mov	r25, r24
     c52:	9f 7d       	andi	r25, 0xDF	; 223
     c54:	95 54       	subi	r25, 0x45	; 69
     c56:	93 30       	cpi	r25, 0x03	; 3
     c58:	28 f4       	brcc	.+10     	; 0xc64 <vfprintf+0x130>
     c5a:	0c 5f       	subi	r16, 0xFC	; 252
     c5c:	1f 4f       	sbci	r17, 0xFF	; 255
     c5e:	9f e3       	ldi	r25, 0x3F	; 63
     c60:	99 83       	std	Y+1, r25	; 0x01
     c62:	0d c0       	rjmp	.+26     	; 0xc7e <vfprintf+0x14a>
     c64:	83 36       	cpi	r24, 0x63	; 99
     c66:	31 f0       	breq	.+12     	; 0xc74 <vfprintf+0x140>
     c68:	83 37       	cpi	r24, 0x73	; 115
     c6a:	71 f0       	breq	.+28     	; 0xc88 <vfprintf+0x154>
     c6c:	83 35       	cpi	r24, 0x53	; 83
     c6e:	09 f0       	breq	.+2      	; 0xc72 <vfprintf+0x13e>
     c70:	55 c0       	rjmp	.+170    	; 0xd1c <vfprintf+0x1e8>
     c72:	20 c0       	rjmp	.+64     	; 0xcb4 <vfprintf+0x180>
     c74:	f8 01       	movw	r30, r16
     c76:	80 81       	ld	r24, Z
     c78:	89 83       	std	Y+1, r24	; 0x01
     c7a:	0e 5f       	subi	r16, 0xFE	; 254
     c7c:	1f 4f       	sbci	r17, 0xFF	; 255
     c7e:	88 24       	eor	r8, r8
     c80:	83 94       	inc	r8
     c82:	91 2c       	mov	r9, r1
     c84:	53 01       	movw	r10, r6
     c86:	12 c0       	rjmp	.+36     	; 0xcac <vfprintf+0x178>
     c88:	28 01       	movw	r4, r16
     c8a:	f2 e0       	ldi	r31, 0x02	; 2
     c8c:	4f 0e       	add	r4, r31
     c8e:	51 1c       	adc	r5, r1
     c90:	f8 01       	movw	r30, r16
     c92:	a0 80       	ld	r10, Z
     c94:	b1 80       	ldd	r11, Z+1	; 0x01
     c96:	36 fe       	sbrs	r3, 6
     c98:	03 c0       	rjmp	.+6      	; 0xca0 <vfprintf+0x16c>
     c9a:	69 2d       	mov	r22, r9
     c9c:	70 e0       	ldi	r23, 0x00	; 0
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <vfprintf+0x170>
     ca0:	6f ef       	ldi	r22, 0xFF	; 255
     ca2:	7f ef       	ldi	r23, 0xFF	; 255
     ca4:	c5 01       	movw	r24, r10
     ca6:	4e d1       	rcall	.+668    	; 0xf44 <strnlen>
     ca8:	4c 01       	movw	r8, r24
     caa:	82 01       	movw	r16, r4
     cac:	f3 2d       	mov	r31, r3
     cae:	ff 77       	andi	r31, 0x7F	; 127
     cb0:	3f 2e       	mov	r3, r31
     cb2:	15 c0       	rjmp	.+42     	; 0xcde <vfprintf+0x1aa>
     cb4:	28 01       	movw	r4, r16
     cb6:	22 e0       	ldi	r18, 0x02	; 2
     cb8:	42 0e       	add	r4, r18
     cba:	51 1c       	adc	r5, r1
     cbc:	f8 01       	movw	r30, r16
     cbe:	a0 80       	ld	r10, Z
     cc0:	b1 80       	ldd	r11, Z+1	; 0x01
     cc2:	36 fe       	sbrs	r3, 6
     cc4:	03 c0       	rjmp	.+6      	; 0xccc <vfprintf+0x198>
     cc6:	69 2d       	mov	r22, r9
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <vfprintf+0x19c>
     ccc:	6f ef       	ldi	r22, 0xFF	; 255
     cce:	7f ef       	ldi	r23, 0xFF	; 255
     cd0:	c5 01       	movw	r24, r10
     cd2:	2d d1       	rcall	.+602    	; 0xf2e <strnlen_P>
     cd4:	4c 01       	movw	r8, r24
     cd6:	f3 2d       	mov	r31, r3
     cd8:	f0 68       	ori	r31, 0x80	; 128
     cda:	3f 2e       	mov	r3, r31
     cdc:	82 01       	movw	r16, r4
     cde:	33 fc       	sbrc	r3, 3
     ce0:	19 c0       	rjmp	.+50     	; 0xd14 <vfprintf+0x1e0>
     ce2:	82 2d       	mov	r24, r2
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	88 16       	cp	r8, r24
     ce8:	99 06       	cpc	r9, r25
     cea:	a0 f4       	brcc	.+40     	; 0xd14 <vfprintf+0x1e0>
     cec:	b6 01       	movw	r22, r12
     cee:	80 e2       	ldi	r24, 0x20	; 32
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	33 d1       	rcall	.+614    	; 0xf5a <fputc>
     cf4:	2a 94       	dec	r2
     cf6:	f5 cf       	rjmp	.-22     	; 0xce2 <vfprintf+0x1ae>
     cf8:	f5 01       	movw	r30, r10
     cfa:	37 fc       	sbrc	r3, 7
     cfc:	85 91       	lpm	r24, Z+
     cfe:	37 fe       	sbrs	r3, 7
     d00:	81 91       	ld	r24, Z+
     d02:	5f 01       	movw	r10, r30
     d04:	b6 01       	movw	r22, r12
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	28 d1       	rcall	.+592    	; 0xf5a <fputc>
     d0a:	21 10       	cpse	r2, r1
     d0c:	2a 94       	dec	r2
     d0e:	21 e0       	ldi	r18, 0x01	; 1
     d10:	82 1a       	sub	r8, r18
     d12:	91 08       	sbc	r9, r1
     d14:	81 14       	cp	r8, r1
     d16:	91 04       	cpc	r9, r1
     d18:	79 f7       	brne	.-34     	; 0xcf8 <vfprintf+0x1c4>
     d1a:	e1 c0       	rjmp	.+450    	; 0xede <vfprintf+0x3aa>
     d1c:	84 36       	cpi	r24, 0x64	; 100
     d1e:	11 f0       	breq	.+4      	; 0xd24 <vfprintf+0x1f0>
     d20:	89 36       	cpi	r24, 0x69	; 105
     d22:	39 f5       	brne	.+78     	; 0xd72 <vfprintf+0x23e>
     d24:	f8 01       	movw	r30, r16
     d26:	37 fe       	sbrs	r3, 7
     d28:	07 c0       	rjmp	.+14     	; 0xd38 <vfprintf+0x204>
     d2a:	60 81       	ld	r22, Z
     d2c:	71 81       	ldd	r23, Z+1	; 0x01
     d2e:	82 81       	ldd	r24, Z+2	; 0x02
     d30:	93 81       	ldd	r25, Z+3	; 0x03
     d32:	0c 5f       	subi	r16, 0xFC	; 252
     d34:	1f 4f       	sbci	r17, 0xFF	; 255
     d36:	08 c0       	rjmp	.+16     	; 0xd48 <vfprintf+0x214>
     d38:	60 81       	ld	r22, Z
     d3a:	71 81       	ldd	r23, Z+1	; 0x01
     d3c:	07 2e       	mov	r0, r23
     d3e:	00 0c       	add	r0, r0
     d40:	88 0b       	sbc	r24, r24
     d42:	99 0b       	sbc	r25, r25
     d44:	0e 5f       	subi	r16, 0xFE	; 254
     d46:	1f 4f       	sbci	r17, 0xFF	; 255
     d48:	f3 2d       	mov	r31, r3
     d4a:	ff 76       	andi	r31, 0x6F	; 111
     d4c:	3f 2e       	mov	r3, r31
     d4e:	97 ff       	sbrs	r25, 7
     d50:	09 c0       	rjmp	.+18     	; 0xd64 <vfprintf+0x230>
     d52:	90 95       	com	r25
     d54:	80 95       	com	r24
     d56:	70 95       	com	r23
     d58:	61 95       	neg	r22
     d5a:	7f 4f       	sbci	r23, 0xFF	; 255
     d5c:	8f 4f       	sbci	r24, 0xFF	; 255
     d5e:	9f 4f       	sbci	r25, 0xFF	; 255
     d60:	f0 68       	ori	r31, 0x80	; 128
     d62:	3f 2e       	mov	r3, r31
     d64:	2a e0       	ldi	r18, 0x0A	; 10
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	a3 01       	movw	r20, r6
     d6a:	33 d1       	rcall	.+614    	; 0xfd2 <__ultoa_invert>
     d6c:	88 2e       	mov	r8, r24
     d6e:	86 18       	sub	r8, r6
     d70:	44 c0       	rjmp	.+136    	; 0xdfa <vfprintf+0x2c6>
     d72:	85 37       	cpi	r24, 0x75	; 117
     d74:	31 f4       	brne	.+12     	; 0xd82 <vfprintf+0x24e>
     d76:	23 2d       	mov	r18, r3
     d78:	2f 7e       	andi	r18, 0xEF	; 239
     d7a:	b2 2e       	mov	r11, r18
     d7c:	2a e0       	ldi	r18, 0x0A	; 10
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	25 c0       	rjmp	.+74     	; 0xdcc <vfprintf+0x298>
     d82:	93 2d       	mov	r25, r3
     d84:	99 7f       	andi	r25, 0xF9	; 249
     d86:	b9 2e       	mov	r11, r25
     d88:	8f 36       	cpi	r24, 0x6F	; 111
     d8a:	c1 f0       	breq	.+48     	; 0xdbc <vfprintf+0x288>
     d8c:	18 f4       	brcc	.+6      	; 0xd94 <vfprintf+0x260>
     d8e:	88 35       	cpi	r24, 0x58	; 88
     d90:	79 f0       	breq	.+30     	; 0xdb0 <vfprintf+0x27c>
     d92:	ae c0       	rjmp	.+348    	; 0xef0 <vfprintf+0x3bc>
     d94:	80 37       	cpi	r24, 0x70	; 112
     d96:	19 f0       	breq	.+6      	; 0xd9e <vfprintf+0x26a>
     d98:	88 37       	cpi	r24, 0x78	; 120
     d9a:	21 f0       	breq	.+8      	; 0xda4 <vfprintf+0x270>
     d9c:	a9 c0       	rjmp	.+338    	; 0xef0 <vfprintf+0x3bc>
     d9e:	e9 2f       	mov	r30, r25
     da0:	e0 61       	ori	r30, 0x10	; 16
     da2:	be 2e       	mov	r11, r30
     da4:	b4 fe       	sbrs	r11, 4
     da6:	0d c0       	rjmp	.+26     	; 0xdc2 <vfprintf+0x28e>
     da8:	fb 2d       	mov	r31, r11
     daa:	f4 60       	ori	r31, 0x04	; 4
     dac:	bf 2e       	mov	r11, r31
     dae:	09 c0       	rjmp	.+18     	; 0xdc2 <vfprintf+0x28e>
     db0:	34 fe       	sbrs	r3, 4
     db2:	0a c0       	rjmp	.+20     	; 0xdc8 <vfprintf+0x294>
     db4:	29 2f       	mov	r18, r25
     db6:	26 60       	ori	r18, 0x06	; 6
     db8:	b2 2e       	mov	r11, r18
     dba:	06 c0       	rjmp	.+12     	; 0xdc8 <vfprintf+0x294>
     dbc:	28 e0       	ldi	r18, 0x08	; 8
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	05 c0       	rjmp	.+10     	; 0xdcc <vfprintf+0x298>
     dc2:	20 e1       	ldi	r18, 0x10	; 16
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <vfprintf+0x298>
     dc8:	20 e1       	ldi	r18, 0x10	; 16
     dca:	32 e0       	ldi	r19, 0x02	; 2
     dcc:	f8 01       	movw	r30, r16
     dce:	b7 fe       	sbrs	r11, 7
     dd0:	07 c0       	rjmp	.+14     	; 0xde0 <vfprintf+0x2ac>
     dd2:	60 81       	ld	r22, Z
     dd4:	71 81       	ldd	r23, Z+1	; 0x01
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	0c 5f       	subi	r16, 0xFC	; 252
     ddc:	1f 4f       	sbci	r17, 0xFF	; 255
     dde:	06 c0       	rjmp	.+12     	; 0xdec <vfprintf+0x2b8>
     de0:	60 81       	ld	r22, Z
     de2:	71 81       	ldd	r23, Z+1	; 0x01
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	0e 5f       	subi	r16, 0xFE	; 254
     dea:	1f 4f       	sbci	r17, 0xFF	; 255
     dec:	a3 01       	movw	r20, r6
     dee:	f1 d0       	rcall	.+482    	; 0xfd2 <__ultoa_invert>
     df0:	88 2e       	mov	r8, r24
     df2:	86 18       	sub	r8, r6
     df4:	fb 2d       	mov	r31, r11
     df6:	ff 77       	andi	r31, 0x7F	; 127
     df8:	3f 2e       	mov	r3, r31
     dfa:	36 fe       	sbrs	r3, 6
     dfc:	0d c0       	rjmp	.+26     	; 0xe18 <vfprintf+0x2e4>
     dfe:	23 2d       	mov	r18, r3
     e00:	2e 7f       	andi	r18, 0xFE	; 254
     e02:	a2 2e       	mov	r10, r18
     e04:	89 14       	cp	r8, r9
     e06:	58 f4       	brcc	.+22     	; 0xe1e <vfprintf+0x2ea>
     e08:	34 fe       	sbrs	r3, 4
     e0a:	0b c0       	rjmp	.+22     	; 0xe22 <vfprintf+0x2ee>
     e0c:	32 fc       	sbrc	r3, 2
     e0e:	09 c0       	rjmp	.+18     	; 0xe22 <vfprintf+0x2ee>
     e10:	83 2d       	mov	r24, r3
     e12:	8e 7e       	andi	r24, 0xEE	; 238
     e14:	a8 2e       	mov	r10, r24
     e16:	05 c0       	rjmp	.+10     	; 0xe22 <vfprintf+0x2ee>
     e18:	b8 2c       	mov	r11, r8
     e1a:	a3 2c       	mov	r10, r3
     e1c:	03 c0       	rjmp	.+6      	; 0xe24 <vfprintf+0x2f0>
     e1e:	b8 2c       	mov	r11, r8
     e20:	01 c0       	rjmp	.+2      	; 0xe24 <vfprintf+0x2f0>
     e22:	b9 2c       	mov	r11, r9
     e24:	a4 fe       	sbrs	r10, 4
     e26:	0f c0       	rjmp	.+30     	; 0xe46 <vfprintf+0x312>
     e28:	fe 01       	movw	r30, r28
     e2a:	e8 0d       	add	r30, r8
     e2c:	f1 1d       	adc	r31, r1
     e2e:	80 81       	ld	r24, Z
     e30:	80 33       	cpi	r24, 0x30	; 48
     e32:	21 f4       	brne	.+8      	; 0xe3c <vfprintf+0x308>
     e34:	9a 2d       	mov	r25, r10
     e36:	99 7e       	andi	r25, 0xE9	; 233
     e38:	a9 2e       	mov	r10, r25
     e3a:	09 c0       	rjmp	.+18     	; 0xe4e <vfprintf+0x31a>
     e3c:	a2 fe       	sbrs	r10, 2
     e3e:	06 c0       	rjmp	.+12     	; 0xe4c <vfprintf+0x318>
     e40:	b3 94       	inc	r11
     e42:	b3 94       	inc	r11
     e44:	04 c0       	rjmp	.+8      	; 0xe4e <vfprintf+0x31a>
     e46:	8a 2d       	mov	r24, r10
     e48:	86 78       	andi	r24, 0x86	; 134
     e4a:	09 f0       	breq	.+2      	; 0xe4e <vfprintf+0x31a>
     e4c:	b3 94       	inc	r11
     e4e:	a3 fc       	sbrc	r10, 3
     e50:	10 c0       	rjmp	.+32     	; 0xe72 <vfprintf+0x33e>
     e52:	a0 fe       	sbrs	r10, 0
     e54:	06 c0       	rjmp	.+12     	; 0xe62 <vfprintf+0x32e>
     e56:	b2 14       	cp	r11, r2
     e58:	80 f4       	brcc	.+32     	; 0xe7a <vfprintf+0x346>
     e5a:	28 0c       	add	r2, r8
     e5c:	92 2c       	mov	r9, r2
     e5e:	9b 18       	sub	r9, r11
     e60:	0d c0       	rjmp	.+26     	; 0xe7c <vfprintf+0x348>
     e62:	b2 14       	cp	r11, r2
     e64:	58 f4       	brcc	.+22     	; 0xe7c <vfprintf+0x348>
     e66:	b6 01       	movw	r22, r12
     e68:	80 e2       	ldi	r24, 0x20	; 32
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	76 d0       	rcall	.+236    	; 0xf5a <fputc>
     e6e:	b3 94       	inc	r11
     e70:	f8 cf       	rjmp	.-16     	; 0xe62 <vfprintf+0x32e>
     e72:	b2 14       	cp	r11, r2
     e74:	18 f4       	brcc	.+6      	; 0xe7c <vfprintf+0x348>
     e76:	2b 18       	sub	r2, r11
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <vfprintf+0x34a>
     e7a:	98 2c       	mov	r9, r8
     e7c:	21 2c       	mov	r2, r1
     e7e:	a4 fe       	sbrs	r10, 4
     e80:	0f c0       	rjmp	.+30     	; 0xea0 <vfprintf+0x36c>
     e82:	b6 01       	movw	r22, r12
     e84:	80 e3       	ldi	r24, 0x30	; 48
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	68 d0       	rcall	.+208    	; 0xf5a <fputc>
     e8a:	a2 fe       	sbrs	r10, 2
     e8c:	16 c0       	rjmp	.+44     	; 0xeba <vfprintf+0x386>
     e8e:	a1 fc       	sbrc	r10, 1
     e90:	03 c0       	rjmp	.+6      	; 0xe98 <vfprintf+0x364>
     e92:	88 e7       	ldi	r24, 0x78	; 120
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <vfprintf+0x368>
     e98:	88 e5       	ldi	r24, 0x58	; 88
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	b6 01       	movw	r22, r12
     e9e:	0c c0       	rjmp	.+24     	; 0xeb8 <vfprintf+0x384>
     ea0:	8a 2d       	mov	r24, r10
     ea2:	86 78       	andi	r24, 0x86	; 134
     ea4:	51 f0       	breq	.+20     	; 0xeba <vfprintf+0x386>
     ea6:	a1 fe       	sbrs	r10, 1
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <vfprintf+0x37a>
     eaa:	8b e2       	ldi	r24, 0x2B	; 43
     eac:	01 c0       	rjmp	.+2      	; 0xeb0 <vfprintf+0x37c>
     eae:	80 e2       	ldi	r24, 0x20	; 32
     eb0:	a7 fc       	sbrc	r10, 7
     eb2:	8d e2       	ldi	r24, 0x2D	; 45
     eb4:	b6 01       	movw	r22, r12
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	50 d0       	rcall	.+160    	; 0xf5a <fputc>
     eba:	89 14       	cp	r8, r9
     ebc:	30 f4       	brcc	.+12     	; 0xeca <vfprintf+0x396>
     ebe:	b6 01       	movw	r22, r12
     ec0:	80 e3       	ldi	r24, 0x30	; 48
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	4a d0       	rcall	.+148    	; 0xf5a <fputc>
     ec6:	9a 94       	dec	r9
     ec8:	f8 cf       	rjmp	.-16     	; 0xeba <vfprintf+0x386>
     eca:	8a 94       	dec	r8
     ecc:	f3 01       	movw	r30, r6
     ece:	e8 0d       	add	r30, r8
     ed0:	f1 1d       	adc	r31, r1
     ed2:	80 81       	ld	r24, Z
     ed4:	b6 01       	movw	r22, r12
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	40 d0       	rcall	.+128    	; 0xf5a <fputc>
     eda:	81 10       	cpse	r8, r1
     edc:	f6 cf       	rjmp	.-20     	; 0xeca <vfprintf+0x396>
     ede:	22 20       	and	r2, r2
     ee0:	09 f4       	brne	.+2      	; 0xee4 <vfprintf+0x3b0>
     ee2:	4e ce       	rjmp	.-868    	; 0xb80 <vfprintf+0x4c>
     ee4:	b6 01       	movw	r22, r12
     ee6:	80 e2       	ldi	r24, 0x20	; 32
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	37 d0       	rcall	.+110    	; 0xf5a <fputc>
     eec:	2a 94       	dec	r2
     eee:	f7 cf       	rjmp	.-18     	; 0xede <vfprintf+0x3aa>
     ef0:	f6 01       	movw	r30, r12
     ef2:	86 81       	ldd	r24, Z+6	; 0x06
     ef4:	97 81       	ldd	r25, Z+7	; 0x07
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <vfprintf+0x3c8>
     ef8:	8f ef       	ldi	r24, 0xFF	; 255
     efa:	9f ef       	ldi	r25, 0xFF	; 255
     efc:	2b 96       	adiw	r28, 0x0b	; 11
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	f8 94       	cli
     f02:	de bf       	out	0x3e, r29	; 62
     f04:	0f be       	out	0x3f, r0	; 63
     f06:	cd bf       	out	0x3d, r28	; 61
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	1f 91       	pop	r17
     f0e:	0f 91       	pop	r16
     f10:	ff 90       	pop	r15
     f12:	ef 90       	pop	r14
     f14:	df 90       	pop	r13
     f16:	cf 90       	pop	r12
     f18:	bf 90       	pop	r11
     f1a:	af 90       	pop	r10
     f1c:	9f 90       	pop	r9
     f1e:	8f 90       	pop	r8
     f20:	7f 90       	pop	r7
     f22:	6f 90       	pop	r6
     f24:	5f 90       	pop	r5
     f26:	4f 90       	pop	r4
     f28:	3f 90       	pop	r3
     f2a:	2f 90       	pop	r2
     f2c:	08 95       	ret

00000f2e <strnlen_P>:
     f2e:	fc 01       	movw	r30, r24
     f30:	05 90       	lpm	r0, Z+
     f32:	61 50       	subi	r22, 0x01	; 1
     f34:	70 40       	sbci	r23, 0x00	; 0
     f36:	01 10       	cpse	r0, r1
     f38:	d8 f7       	brcc	.-10     	; 0xf30 <strnlen_P+0x2>
     f3a:	80 95       	com	r24
     f3c:	90 95       	com	r25
     f3e:	8e 0f       	add	r24, r30
     f40:	9f 1f       	adc	r25, r31
     f42:	08 95       	ret

00000f44 <strnlen>:
     f44:	fc 01       	movw	r30, r24
     f46:	61 50       	subi	r22, 0x01	; 1
     f48:	70 40       	sbci	r23, 0x00	; 0
     f4a:	01 90       	ld	r0, Z+
     f4c:	01 10       	cpse	r0, r1
     f4e:	d8 f7       	brcc	.-10     	; 0xf46 <strnlen+0x2>
     f50:	80 95       	com	r24
     f52:	90 95       	com	r25
     f54:	8e 0f       	add	r24, r30
     f56:	9f 1f       	adc	r25, r31
     f58:	08 95       	ret

00000f5a <fputc>:
     f5a:	0f 93       	push	r16
     f5c:	1f 93       	push	r17
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	fb 01       	movw	r30, r22
     f64:	23 81       	ldd	r18, Z+3	; 0x03
     f66:	21 fd       	sbrc	r18, 1
     f68:	03 c0       	rjmp	.+6      	; 0xf70 <fputc+0x16>
     f6a:	8f ef       	ldi	r24, 0xFF	; 255
     f6c:	9f ef       	ldi	r25, 0xFF	; 255
     f6e:	2c c0       	rjmp	.+88     	; 0xfc8 <fputc+0x6e>
     f70:	22 ff       	sbrs	r18, 2
     f72:	16 c0       	rjmp	.+44     	; 0xfa0 <fputc+0x46>
     f74:	46 81       	ldd	r20, Z+6	; 0x06
     f76:	57 81       	ldd	r21, Z+7	; 0x07
     f78:	24 81       	ldd	r18, Z+4	; 0x04
     f7a:	35 81       	ldd	r19, Z+5	; 0x05
     f7c:	42 17       	cp	r20, r18
     f7e:	53 07       	cpc	r21, r19
     f80:	44 f4       	brge	.+16     	; 0xf92 <fputc+0x38>
     f82:	a0 81       	ld	r26, Z
     f84:	b1 81       	ldd	r27, Z+1	; 0x01
     f86:	9d 01       	movw	r18, r26
     f88:	2f 5f       	subi	r18, 0xFF	; 255
     f8a:	3f 4f       	sbci	r19, 0xFF	; 255
     f8c:	31 83       	std	Z+1, r19	; 0x01
     f8e:	20 83       	st	Z, r18
     f90:	8c 93       	st	X, r24
     f92:	26 81       	ldd	r18, Z+6	; 0x06
     f94:	37 81       	ldd	r19, Z+7	; 0x07
     f96:	2f 5f       	subi	r18, 0xFF	; 255
     f98:	3f 4f       	sbci	r19, 0xFF	; 255
     f9a:	37 83       	std	Z+7, r19	; 0x07
     f9c:	26 83       	std	Z+6, r18	; 0x06
     f9e:	14 c0       	rjmp	.+40     	; 0xfc8 <fputc+0x6e>
     fa0:	8b 01       	movw	r16, r22
     fa2:	ec 01       	movw	r28, r24
     fa4:	fb 01       	movw	r30, r22
     fa6:	00 84       	ldd	r0, Z+8	; 0x08
     fa8:	f1 85       	ldd	r31, Z+9	; 0x09
     faa:	e0 2d       	mov	r30, r0
     fac:	09 95       	icall
     fae:	89 2b       	or	r24, r25
     fb0:	e1 f6       	brne	.-72     	; 0xf6a <fputc+0x10>
     fb2:	d8 01       	movw	r26, r16
     fb4:	16 96       	adiw	r26, 0x06	; 6
     fb6:	8d 91       	ld	r24, X+
     fb8:	9c 91       	ld	r25, X
     fba:	17 97       	sbiw	r26, 0x07	; 7
     fbc:	01 96       	adiw	r24, 0x01	; 1
     fbe:	17 96       	adiw	r26, 0x07	; 7
     fc0:	9c 93       	st	X, r25
     fc2:	8e 93       	st	-X, r24
     fc4:	16 97       	sbiw	r26, 0x06	; 6
     fc6:	ce 01       	movw	r24, r28
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	1f 91       	pop	r17
     fce:	0f 91       	pop	r16
     fd0:	08 95       	ret

00000fd2 <__ultoa_invert>:
     fd2:	fa 01       	movw	r30, r20
     fd4:	aa 27       	eor	r26, r26
     fd6:	28 30       	cpi	r18, 0x08	; 8
     fd8:	51 f1       	breq	.+84     	; 0x102e <__ultoa_invert+0x5c>
     fda:	20 31       	cpi	r18, 0x10	; 16
     fdc:	81 f1       	breq	.+96     	; 0x103e <__ultoa_invert+0x6c>
     fde:	e8 94       	clt
     fe0:	6f 93       	push	r22
     fe2:	6e 7f       	andi	r22, 0xFE	; 254
     fe4:	6e 5f       	subi	r22, 0xFE	; 254
     fe6:	7f 4f       	sbci	r23, 0xFF	; 255
     fe8:	8f 4f       	sbci	r24, 0xFF	; 255
     fea:	9f 4f       	sbci	r25, 0xFF	; 255
     fec:	af 4f       	sbci	r26, 0xFF	; 255
     fee:	b1 e0       	ldi	r27, 0x01	; 1
     ff0:	3e d0       	rcall	.+124    	; 0x106e <__ultoa_invert+0x9c>
     ff2:	b4 e0       	ldi	r27, 0x04	; 4
     ff4:	3c d0       	rcall	.+120    	; 0x106e <__ultoa_invert+0x9c>
     ff6:	67 0f       	add	r22, r23
     ff8:	78 1f       	adc	r23, r24
     ffa:	89 1f       	adc	r24, r25
     ffc:	9a 1f       	adc	r25, r26
     ffe:	a1 1d       	adc	r26, r1
    1000:	68 0f       	add	r22, r24
    1002:	79 1f       	adc	r23, r25
    1004:	8a 1f       	adc	r24, r26
    1006:	91 1d       	adc	r25, r1
    1008:	a1 1d       	adc	r26, r1
    100a:	6a 0f       	add	r22, r26
    100c:	71 1d       	adc	r23, r1
    100e:	81 1d       	adc	r24, r1
    1010:	91 1d       	adc	r25, r1
    1012:	a1 1d       	adc	r26, r1
    1014:	20 d0       	rcall	.+64     	; 0x1056 <__ultoa_invert+0x84>
    1016:	09 f4       	brne	.+2      	; 0x101a <__ultoa_invert+0x48>
    1018:	68 94       	set
    101a:	3f 91       	pop	r19
    101c:	2a e0       	ldi	r18, 0x0A	; 10
    101e:	26 9f       	mul	r18, r22
    1020:	11 24       	eor	r1, r1
    1022:	30 19       	sub	r19, r0
    1024:	30 5d       	subi	r19, 0xD0	; 208
    1026:	31 93       	st	Z+, r19
    1028:	de f6       	brtc	.-74     	; 0xfe0 <__ultoa_invert+0xe>
    102a:	cf 01       	movw	r24, r30
    102c:	08 95       	ret
    102e:	46 2f       	mov	r20, r22
    1030:	47 70       	andi	r20, 0x07	; 7
    1032:	40 5d       	subi	r20, 0xD0	; 208
    1034:	41 93       	st	Z+, r20
    1036:	b3 e0       	ldi	r27, 0x03	; 3
    1038:	0f d0       	rcall	.+30     	; 0x1058 <__ultoa_invert+0x86>
    103a:	c9 f7       	brne	.-14     	; 0x102e <__ultoa_invert+0x5c>
    103c:	f6 cf       	rjmp	.-20     	; 0x102a <__ultoa_invert+0x58>
    103e:	46 2f       	mov	r20, r22
    1040:	4f 70       	andi	r20, 0x0F	; 15
    1042:	40 5d       	subi	r20, 0xD0	; 208
    1044:	4a 33       	cpi	r20, 0x3A	; 58
    1046:	18 f0       	brcs	.+6      	; 0x104e <__ultoa_invert+0x7c>
    1048:	49 5d       	subi	r20, 0xD9	; 217
    104a:	31 fd       	sbrc	r19, 1
    104c:	40 52       	subi	r20, 0x20	; 32
    104e:	41 93       	st	Z+, r20
    1050:	02 d0       	rcall	.+4      	; 0x1056 <__ultoa_invert+0x84>
    1052:	a9 f7       	brne	.-22     	; 0x103e <__ultoa_invert+0x6c>
    1054:	ea cf       	rjmp	.-44     	; 0x102a <__ultoa_invert+0x58>
    1056:	b4 e0       	ldi	r27, 0x04	; 4
    1058:	a6 95       	lsr	r26
    105a:	97 95       	ror	r25
    105c:	87 95       	ror	r24
    105e:	77 95       	ror	r23
    1060:	67 95       	ror	r22
    1062:	ba 95       	dec	r27
    1064:	c9 f7       	brne	.-14     	; 0x1058 <__ultoa_invert+0x86>
    1066:	00 97       	sbiw	r24, 0x00	; 0
    1068:	61 05       	cpc	r22, r1
    106a:	71 05       	cpc	r23, r1
    106c:	08 95       	ret
    106e:	9b 01       	movw	r18, r22
    1070:	ac 01       	movw	r20, r24
    1072:	0a 2e       	mov	r0, r26
    1074:	06 94       	lsr	r0
    1076:	57 95       	ror	r21
    1078:	47 95       	ror	r20
    107a:	37 95       	ror	r19
    107c:	27 95       	ror	r18
    107e:	ba 95       	dec	r27
    1080:	c9 f7       	brne	.-14     	; 0x1074 <__ultoa_invert+0xa2>
    1082:	62 0f       	add	r22, r18
    1084:	73 1f       	adc	r23, r19
    1086:	84 1f       	adc	r24, r20
    1088:	95 1f       	adc	r25, r21
    108a:	a0 1d       	adc	r26, r0
    108c:	08 95       	ret

0000108e <_exit>:
    108e:	f8 94       	cli

00001090 <__stop_program>:
    1090:	ff cf       	rjmp	.-2      	; 0x1090 <__stop_program>
