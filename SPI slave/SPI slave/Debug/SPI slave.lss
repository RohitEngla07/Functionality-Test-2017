
SPI slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c2  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000610  00000000  00000000  00000882  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002cb  00000000  00000000  00000e92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001160  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000364  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000039  00000000  00000000  00001528  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001561  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_SlaveInit>:
#define BAUDRATE 9600
#define BAUD_PRESCALER 95
void SPI_SlaveInit(void)
{
	/* Set MISO output, all others input */
	DDRB = 0b01000000;
  6c:	80 e4       	ldi	r24, 0x40	; 64
  6e:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI */
	SPCR = (1<<SPE);
  70:	8d b9       	out	0x0d, r24	; 13
  72:	08 95       	ret

00000074 <USART_Init>:
}
void USART_Init( unsigned int ubrr)
{
	/*Set baud rate */
	UBRRH = (unsigned char)(95>>8);
  74:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char)95;
  76:	8f e5       	ldi	r24, 0x5F	; 95
  78:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<RXEN)|(1<<TXEN);
  7a:	88 e1       	ldi	r24, 0x18	; 24
  7c:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
  7e:	8e e8       	ldi	r24, 0x8E	; 142
  80:	80 bd       	out	0x20, r24	; 32
  82:	08 95       	ret

00000084 <USART_Transmit>:
}
void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) );
  84:	5d 9b       	sbis	0x0b, 5	; 11
  86:	fe cf       	rjmp	.-4      	; 0x84 <USART_Transmit>
	/* Put data into buffer, sends the data */
	UDR = data;
  88:	8c b9       	out	0x0c, r24	; 12
  8a:	08 95       	ret

0000008c <SPI_SlaveReceive>:
}
unsigned char SPI_SlaveReceive(void)
{
	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)))
  8c:	77 9b       	sbis	0x0e, 7	; 14
  8e:	fe cf       	rjmp	.-4      	; 0x8c <SPI_SlaveReceive>
	{
		;
	}
	/* Return Data Register */
	return SPDR;
  90:	8f b1       	in	r24, 0x0f	; 15
}
  92:	08 95       	ret

00000094 <main>:
	///* Wait for transmission complete */
	//while(!(SPSR & (1<<SPIF)));
//}
int main(void)
{
	SPI_SlaveInit();
  94:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_SlaveInit>
	USART_Init(BAUD_PRESCALER);
  98:	8f e5       	ldi	r24, 0x5F	; 95
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	0e 94 3a 00 	call	0x74	; 0x74 <USART_Init>
	 // Enable the USART Recieve Complete interrupt (USART_RXC)
	/* Replace with your application code */
	while (1)
	{
		unsigned char x;
		x=SPI_SlaveReceive();
  a0:	0e 94 46 00 	call	0x8c	; 0x8c <SPI_SlaveReceive>
		USART_Transmit(x);
  a4:	0e 94 42 00 	call	0x84	; 0x84 <USART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	2f ef       	ldi	r18, 0xFF	; 255
  aa:	8f e7       	ldi	r24, 0x7F	; 127
  ac:	94 e0       	ldi	r25, 0x04	; 4
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x1a>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x24>
  b8:	00 00       	nop
  ba:	f2 cf       	rjmp	.-28     	; 0xa0 <main+0xc>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
